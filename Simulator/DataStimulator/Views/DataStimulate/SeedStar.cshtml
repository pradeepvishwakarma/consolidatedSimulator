@using DataStimulator.Resource
@using DataStimulator.Enums
@model List<DataStimulator.Models.DataStimulatorModel>
@{
    ViewBag.Title = "Harvest";
    //var brandItems = Model.Where(elm => elm.FieldID.Equals(59)).Select(elm => new System.Web.UI.WebControls.ListItem { Text = elm.BrandModel.BrandName, Value = elm.BrandModel.BrandID }).ToList();
    //var cropItems = Model.Where(elm => elm.FieldID.Equals(60)).Select(elm => new System.Web.UI.WebControls.ListItem { Text = elm.CropModel.CropName, Value = elm.CropModel.Erid.ToString() }).ToList();
    //var cropID = Model.Where(elm => elm.FieldID.Equals(48)).Select(elm => new System.Web.UI.WebControls.ListItem { Text = elm.FieldID.ToString(), Value = elm.RandomData.Value.ToString()}).ToList();

    List<SelectListItem> cropList = new List<SelectListItem> {new SelectListItem{Text=(int)CropID.Alfalfa + " - Alfalfa", Value=((int)CropID.Alfalfa).ToString()},
                                          new SelectListItem{Text=(int)CropID.Barley + " - Barley", Value=((int)CropID.Barley).ToString()},
                                          new SelectListItem{Text=(int)CropID.EdibleBeans +" - Edible Beans", Value=((int)CropID.EdibleBeans).ToString()},
                                          new SelectListItem{Text=(int)CropID.NavyBeans +" - Navy Beans", Value=((int)CropID.NavyBeans).ToString()},
                                          new SelectListItem{Text=(int)CropID.Canola +" - Canola", Value=((int)CropID.Canola).ToString()},
                                         
                                          new SelectListItem{Text=(int)CropID.Flax +" - Flax", Value=((int)CropID.Flax).ToString()},
                                          
                                          new SelectListItem{Text=(int)CropID.GrassSeeds +" - Grass Seeds", Value=((int)CropID.GrassSeeds).ToString()},
                                          new SelectListItem{Text=(int)CropID.Lentils +" - Lentils", Value=((int)CropID.Lentils).ToString()},
                                          new SelectListItem{Text=(int)CropID.Millet +" - Millet", Value=((int)CropID.Millet).ToString()},  
                                          new SelectListItem{Text=(int)CropID.Mustard +" - Mustard", Value=((int)CropID.Mustard).ToString()},
                                         
                                          new SelectListItem{Text=(int)CropID.Oats +" - Oats", Value=((int)CropID.Oats).ToString()},
                                          new SelectListItem{Text=(int)CropID.FieldPeas +" - Field Peas", Value=((int)CropID.FieldPeas).ToString()},
                                          new SelectListItem{Text=(int)CropID.YellowPopcorn +" - Yellow Popcorn", Value=((int)CropID.YellowPopcorn).ToString()},
                                          new SelectListItem{Text=(int)CropID.WhitePopcorn +" - White Popcorn", Value=((int)CropID.WhitePopcorn).ToString()},
                                          new SelectListItem{Text=(int)CropID.RapeSeed +" - Rape Seed", Value=((int)CropID.RapeSeed).ToString()},
                                          new SelectListItem{Text=(int)CropID.LongRice +" - Long Rice", Value=((int)CropID.LongRice).ToString()},
                                          new SelectListItem{Text=(int)CropID.MediumRice +" - Medium Rice", Value=((int)CropID.MediumRice).ToString()},
                                          new SelectListItem{Text=(int)CropID.Rye +" - Rye", Value=((int)CropID.Rye).ToString()},  
                                          new SelectListItem{Text=(int)CropID.Safflower +" - Safflower", Value=((int)CropID.Safflower).ToString()},
                                          new SelectListItem{Text=(int)CropID.SorghumOrMilo +" - Sorghum/Milo", Value=((int)CropID.SorghumOrMilo).ToString()},
                                                                     
                                         
                                          new SelectListItem{Text=(int)CropID.SunflowerOil +" - Sunflower Oil", Value=((int)CropID.SunflowerOil).ToString()},
                                          new SelectListItem{Text=(int)CropID.SunflowerStripe +" - Sunflower Stripe", Value=((int)CropID.SunflowerStripe).ToString()},
                                          new SelectListItem{Text=(int)CropID.DurumWheat +" - Durum Wheat", Value=((int)CropID.DurumWheat).ToString()},
                                          new SelectListItem{Text=(int)CropID.HardRedSpringWheat +" - Hard Red Spring Wheat", Value=((int)CropID.HardRedSpringWheat).ToString()},
                                          new SelectListItem{Text=(int)CropID.HardRedWinterWheat +" - Hard Red Winter Wheat", Value=((int)CropID.HardRedWinterWheat).ToString()},
                                          new SelectListItem{Text=(int)CropID.SoftRedWinterWheat +" - Soft Red Winter Wheat", Value=((int)CropID.SoftRedWinterWheat).ToString()},
                                          new SelectListItem{Text=(int)CropID.WhiteWheat +" - White Wheat", Value=((int)CropID.WhiteWheat).ToString()},  
                                          new SelectListItem{Text=(int)CropID.Chickpeas +" - Chickpeas", Value=((int)CropID.Chickpeas).ToString()},
                                          new SelectListItem{Text=(int)CropID.Lupins +" - Lupins", Value=((int)CropID.Lupins).ToString()},
                                          new SelectListItem{Text=(int)CropID.Corn +" - Corn", Value=((int)CropID.Corn).ToString()},
                                            new SelectListItem{Text=(int)CropID.Soybeans +" - Soybeans", Value=((int)CropID.Soybeans).ToString()},                                    
                                    
                                          };




    //var brandDropdown = string.Empty;
    //var cropDropDown = string.Empty;


    //    for (int i = 0; i < brandItems.Count; i++)
    //    {
    //        brandDropdown += string.Format("{0}:{1}{2}", brandItems[i].Value, brandItems[i].Text, (i == brandItems.Count - 1) ? string.Empty : ";");
    //        //brandDropdown += string.Format("<option {0} value={1}>{2}</option>",i==0?"selected=selected":string.Empty,brandItems[i].Value,brandItems[i].Text);
    //    }
    //for (int j = 0; j < cropItems.Count; j++)
    //{
    //    cropDropDown += string.Format("{0}:{1}{2}", cropItems[j].Value, cropItems[j].Text, (j == cropItems.Count - 1) ? string.Empty : ";");
    //    //cropDropDown += string.Format("<option {0} value={1}>{2}</option>", j == 0 ? "selected=selected" : string.Empty, cropItems[j].Value, cropItems[j].Text);
    //}
    //ViewBag.brandDropdown = brandDropdown;
    //ViewBag.cropDropDown = cropDropDown;

    //string url = "ws://harvestwebsocketdatasim.cloudapp.net/simulation";

    int lastFieldID = 0;
    int stateIndex = 0;
    int sectionNumber = 1;
    double totalSection = 0.0;
    
    
    
    
    }

<script> 
    $(function () {
        $("#accordion2").accordion({
            heightStyle: "content",
            collapsible: true,
            active: false
        });

       // alert(@Model.Count);
    });


</script>


<div id="tabs-2" class="ui-tabs-panel ui-widget-content ui-corner-bottom" role="tabpanel" aria-expanded="true" aria-hidden="false" style="display: block;">
  
     
    
     @using (Html.BeginForm("SeedStar", "DataStimulate", FormMethod.Post, new { @id = "SeedStarForm" }))
     {

           @Html.Raw(Server.HtmlDecode(Html.ValidationSummary().ToString()))
         @*<div class="ui-accordion-content ui-widget-content ui-accordion-content-active plotTypePanel" style="display: block;">
            <h3 class="plotType">Plot Type</h3>
            <table cellspacing="0" cellpadding="0" border="0" class="stimulationparameter">
                <thead>
                    <tr>
                        <th>&nbsp;</th>
                        <th>&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @for (var i = 0; i < @Model.Count; i++)
                            {
                                if (@Model[i].FieldID == 29 && @Model[i].Type == 1)
                                {
                                           
                                @Html.RadioButtonFor(m => m[i].FieldValue, 1, @Model[i].FieldValue == 1 ? new { Checked = "checked" } : null)
                                @Html.LabelFor(m => m[i].FieldValue, "Normal")


                                @Html.RadioButtonFor(m => m[i].FieldValue, 2, @Model[i].FieldValue == 2 ? new { Checked = "checked" } : null)
                                @Html.LabelFor(m => m[i].FieldValue, "NShape")

                                @Html.RadioButtonFor(m => m[i].FieldValue, 3, @Model[i].FieldValue == 3 ? new { Checked = "checked" } : null)
                                @Html.LabelFor(m => m[i].FieldValue, "Fit To Farm")
   
                        
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Fieldname)
                                @Html.HiddenFor(m => m[i].Type)
                                }
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>*@
       
         for (var i = 0; i < @Model.Count; i++)
         {
             if (@Model[i].FieldID == 29 && @Model[i].Type == 1)
             {
                   @Html.HiddenFor(m => m[i].FieldID)
                  @Html.HiddenFor(m => m[i].Type)
                   @Html.HiddenFor(m => m[i].Fieldname)
             }
         }
               
        <div id="accordion2">
            <h3>Simulator URL</h3>
            <div>
            <table cellspacing="0" cellpadding="0" border="0" class="stimulationparameter" id="simulatorUrl">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                                <td>
                                    <h4>URL:</h4>
                                </td>
                            <td>
                                 @Html.TextBox(" ", "ws://harvesttest4datasim.cloudapp.net/simulation", new { @class = "text w25em", @readonly = "readonly" })
                                </td>
                             <td>
                                    <img src="~/images/info_button.png" id="URL" class="handCursor"/>
                                 <div id="URLDialog" title="URL Descriptor">
                                <p>@HarvestResource.URLDescription</p>
                                </div>
                                </td>
                            </tr>
                        
                        </tbody>
                        </table>
                </div>
             
            <h3>Root</h3>
            <div>
                <table cellspacing="0" cellpadding="0" border="0" class="stimulationparameter">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>

                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].Type == 1)
                            {
                                if (@Model[i].FieldID == 1)
                                {
                            @*<tr>*@
                                @* <td><h4>Num Rows To Plot</h4></td>*@
                                @* <td>
                            @if (@Model[i].FieldValue != null)
                            {
                             @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                             @Html.ValidationMessageFor(m => m[i].FieldValue)
                            }
                            else
                            {
                             @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                             @Html.ValidationMessageFor(m => m[i].FieldValue)
                            }*@
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                                @*</td>*@
                            @*</tr>*@
                                }

                                if (@Model[i].FieldID == 2)
                                {
                            <tr>
                                <td>
                                    <h4>Machine Width(mm):</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", @id = "machineWidth", onblur = "SetMachineWidth()" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                    @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                </tr>
                                }

                                if (@Model[i].FieldID == 3)
                                {
                            @*<tr>*@
                               @* <td>
                                    <h4>Min Time Between Responses:</h4>
                                </td>*@
                                @* <td>
                                   @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }*@
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                             @Html.HiddenFor(m => m[i].Fieldname)
                                @*</td>*@
                            @*</tr>*@
                                }

                                if (@Model[i].FieldID == 4)
                                {
                            @*<tr>*@
                                @*<td>
                                    <h4>Time Between Messages:</h4>
                                </td>*@
                                @*<td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }*@
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                             @Html.HiddenFor(m => m[i].Fieldname)
                               @* </td>*@
                            @*</tr>*@
                                }

                                if (@Model[i].FieldID == 5)
                                {
                            @*<tr>*@
                               @* <td>
                                    <h4>No. of Epochs / message: </h4>
                                </td>*@
                                @*<td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }*@
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                             @Html.HiddenFor(m => m[i].Fieldname)
                                @*</td>
                            </tr>*@
                                }


                                if (@Model[i].FieldID == 30)
                                { 
                                @*<tr>
                                <td>
                                    <h4>Tractor Speed(km/hr):</h4>
                                </td>
                                <td>
                                   @if (@Model[i].FieldValue != null)
                                   {
                                       @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                       @Html.ValidationMessageFor(m => m[i].FieldValue);

                                   }*@
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                               @* </td>
                            </tr>*@
                                }

                                if (@Model[i].FieldID == 31)
                                {
                            <tr>
                                <td>
                                    <h4>Field Width(Degrees):</h4>
                                </td>
                                <td>
                                   @if (@Model[i].FieldValue != null)
                                   {
                                       @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                       @Html.ValidationMessageFor(m => m[i].FieldValue);

                                   }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                  
                                </td>
                                <td>
                                    <img src="~/images/info_button.png" id="FieldWidth" class="handCursor"/>
                                 <div id="FieldWidthDialog" title="FieldWidth Descriptor">
                                <p>@HarvestResource.FieldWidthDescription</p>
                                </div>
                                </td>
                            </tr>
                                }

                                if (@Model[i].FieldID == 32)
                                {
                            <tr>
                                <td>
                                    <h4>Field Height(Degrees):</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                 <td>
                                     <img src="~/images/info_button.png" id="FieldHeight" class="handCursor"/> 
                                    <div id="FieldHeightDialog" title="FieldHeight Descriptor">
                                    <p>@HarvestResource.FieldHeightDescription</p>
                                    </div>
                                </td>
                            </tr>
                                }


                                if (@Model[i].FieldID == 34)
                                {
                            <tr>
                                <td>
                                    <h4>Acceleration Factor:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                    <img src="~/images/info_button.png" id="AccelerationFactor" class="handCursor"/>
                                    <div id="AccelerationFactorDialog" title="AccelerationFactor Descriptor">
                                    <p>@HarvestResource.AccelerationFactorDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                                }
                                @*
                                if (@Model[i].FieldID == 33)
                                {
                            <tr>
                                <td>
                                    <h4>Responses per Second:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                            </tr>
                            
                                }
                                *@
                                @*
                                if (@Model[i].FieldID == 39)
                                {
                            <tr>
                                <td>
                                    <h4>DataEpochs per ChunkSeqNumber:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                            </tr>
                            
                                }
                                *@

                                
                                if (@Model[i].FieldID == 41)
                                {
                            @*<tr>
                                <td>
                                    <h4>No Of Sources:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }*@
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                @*</td>
                                <td>
                                    <img src="~/images/info_button.png" id="NoOfSources" class="handCursor"/>
                                    <div id="NoOfSourcesDialog" title="NoOfSources Descriptor">
                                    <p>@HarvestResource.NoOfSourcesDescription</p>
                                    </div>
                                    </td>
                            </tr>*@
                            
                                }

                            }
                        }
                    </tbody>
                </table>
                <table cellspacing="0" cellpadding="0" border="0" class="deactivatedSources">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>

                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].Type == 1)
                            {
                                if (@Model[i].FieldID == 40)
                                {
                            @*<tr>
                                <td>
                                    <h4>Deactivated Sources:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }*@
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                @*</td>
                                <td>
                                     <img src="~/images/info_button.png" id="DeactivatedSources" class="handCursor"/>
                                    <div id="DeactivatedSourcesDialog" title="DeactivatedSources Descriptor">
                                    <p>@HarvestResource.DeactivatedSourcesDescription</p>
                                    </div>
                                </td>
                            </tr>*@
                            
                                }

                                if (@Model[i].FieldID == 43)
                                {
                            <tr>
                                <td>
                                    <h4>Client:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                 <td>
                                    <img src="~/images/info_button.png" id="Client" class="handCursor"/>
                                    <div id="ClientDialog" title="Client Descriptor">
                                    <p>@HarvestResource.ClientDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                                }
                                if (@Model[i].FieldID == 45)
                                {
                            <tr>
                                <td>
                                    <h4>Farm:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="Farm" class="handCursor"/>
                                    <div id="FarmDialog" title="Farm Descriptor">
                                    <p>@HarvestResource.FarmDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                                }
                                if (@Model[i].FieldID == 46)
                                {
                            <tr>
                                <td>
                                    <h4>Field:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="Field" class="handCursor"/>
                                    <div id="FieldDialog" title="Field Descriptor">
                                    <p>@HarvestResource.FieldDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                                }
                                if (@Model[i].FieldID == 47)
                                {
                                   
                            <tr>
                                <td>
                                    <h4>Operator:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                    @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="Operator" class="handCursor"/>
                                    <div id="OperatorDialog" title="Operator Descriptor">
                                    <p>@HarvestResource.OperatorDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                                }
                                if (@Model[i].FieldID == 48)
                                {
                            <tr>
                                <td>
                                    <h4>Crop:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {    
                                        @Html.DropDownListFor(model => model[i].RandomData.Value, new SelectList(cropList, "Value", "Text", Model[i].RandomData.Value))
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }

                                    else
                                    {
                                        @Html.DropDownListFor(model => model[i].RandomData.Value, cropList)
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                    @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="Crop" class="handCursor"/>
                                    <div id="CropDialog" title="Crop Descriptor">
                                    <p>@HarvestResource.CropDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                                }

                                if (@Model[i].FieldID == 42)
                                {
                                     @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                    @Html.HiddenFor(m => m[i].Fieldname)
                                }

                            }
                        }
                    </tbody>
                </table>
            </div>
            <h3>Section Control</h3>
            <div>
            <table cellspacing="0" cellpadding="0" border="0" class="stimulationparameter" id="sections">
                    <thead>
                        <tr>
                            <th>Section No.</th>
                            <th>Enabled</th>
                            <th>Width(mm)</th>
                            <th>State Index</th>
                            <th>Consolidated WorkingState ID</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>

                       @for (var i = 0; i < @Model.Count; i++)
                       {
                           if (@Model[i].FieldID == 76)
                           { 
                            <tr id=@i>
                                                               
                                @if (@Model[i].sectionControlModel != null)
                                {
                                    <td>@Html.TextBox(" ", sectionNumber.ToString(), new { @class = "text w50 UX", @readonly = "readonly" })<br />
                                        @*@Html.ValidationMessageFor(m => m[i].sectionControlModel.SectionName)*@
                                        @{
                                         
                                    sectionNumber++;
                                         }
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].sectionControlModel.isEnabled, new { id = "sectionCheckBox" })<br />
                                        @Html.ValidationMessageFor(m => m[i].sectionControlModel.isEnabled)
                                    </td>
                                   <td>
                                        @Html.TextBoxFor(m => m[i].sectionControlModel.Width, new { @class = "text w50 UX", id = "textbox_" + @i + "", onfocus = "previousValue(" + @i + ")", onblur = "CheckWidth(" + @i + ")" })<br />
                                        @Html.ValidationMessageFor(m => m[i].sectionControlModel.Width)
                                       @{
                                    totalSection = totalSection + @Model[i].sectionControlModel.Width;
                                       }
                                   </td>  
                                    <td>
                                        @Html.TextBox(" ", stateIndex.ToString(), new { @class = "text w50 UX", @readonly = "readonly", id = "stateIndex" })
                                        @{
                                    stateIndex++;
                                        }
                                    </td>                  
                                    <td>
                                    @Html.TextBox(" ", "1", new { @class = "text w50 UX", @readonly = "readonly", id = "ConsolidatingStateID" })
                                </td>  
                                      @Html.HiddenFor(m => m[i].FieldID)
                                      @Html.HiddenFor(m => m[i].Type)                                 
                                      @Html.HiddenFor(m => m[i].Fieldname)           
                                    if (i == Model.Count - 1)
                                    {                                 
                                     <td >
                                        @{
                                        lastFieldID = i;
                                        }
                                     <img src="~/images/remove.png" style="height:25px;width:25px" onclick="deleteSections(@i);"/>
                                    </td>
                                    }



                                }
                            </tr>
                           }

                           if (@Model[i].FieldID == 65)
                           {

                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                           }
                           if (@Model[i].FieldID == 79)
                           {
                          
                                 @Html.HiddenFor(m => m[i].FieldID)
                           @Html.HiddenFor(m=>m[i].RandomData.Value)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                           }
                       }
                            
                        </tbody>
                        </table>
                            <input type="button" class="button mt2 mb1" id="addSection"  value="Add Section" onClick="addSections();" />
                                    <script type="text/javascript">
                                        var counter;
                                        var isPageLoad;
                                        var lastValue;
                                        var modelCount;
                                        var sectionNo;
                                        var stateIndexNo;
                                        var previousSectionWidth;
                                        var machineWidth;
                                        var totalSectionWidth;
                                        var sample;
                                        $(document).ready(function () {
                                           
                                            machineWidth = $('#machineWidth').val();
                                            totalSectionWidth =@totalSection
                                            isPageLoad = true;
                                            
                                            
                                        });
                                        function SetMachineWidth()
                                        {
                                            machineWidth = $('#machineWidth').val();
                                        }

                                        function onPageLoad()
                                        {
                                         totalSectionWidth =@totalSection
                                                modelCount = @Model.Count
                                                counter = modelCount
                                                isPageLoad = false;
                                                var lastField =@lastFieldID
                                                sectionNo =@sectionNumber
                                                stateIndexNo =@stateIndex
                                                lastValue = lastField;
                                        }
                                        function previousValue(id) {
                                            
                                            if(isPageLoad)
                                            {
                                                onPageLoad();
                                                
                                            }
                                            previousSectionWidth = $('#textbox_' + id).val();
                                           
                                        }
                                            function CheckWidth(id)
                                            {
                                                var currentSectionWidth = $('#textbox_' + id).val()
                                                if (parseFloat(currentSectionWidth) == NaN || currentSectionWidth == "")
                                                {
                                                    alert("Enter Width");
                                                    document.getElementById("textbox_" +id +"").focus();
                                                }
                                                else if (previousSectionWidth != "") {
                                                    totalSectionWidth = totalSectionWidth - parseFloat(previousSectionWidth) + parseFloat(currentSectionWidth);
                                                }
                                                else
                                                {
                                                    totalSectionWidth=totalSectionWidth+parseFloat(currentSectionWidth)
                                                }
                                                if(machineWidth<totalSectionWidth)
                                                {
                                                    alert("Sum of Widths of Section cannot exceed MachineWidth");
                                                    totalSectionWidth = totalSectionWidth - currentSectionWidth;
                                                    document.getElementById("textbox_" + id + "").value = 0;
                                                }
                                            
                                            }


                                            function addSections() {
                                            
                                                if (isPageLoad)
                                                {
                                                   onPageLoad();
                                                                                        
                                                }
                                                if (sectionNo > 8)
                                                {
                                                    alert("You have added 8 Sections which is the maximum.")
                                                }
                                                else
                                                {
                                                    $('<tr id=' + counter + '><td><input class="text w50 UX" type="text" value="' + sectionNo + '" readonly = "readonly" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].SectionControlModel.Name" data-valmsg-replace="true"></span></td><td><input checked="checked" data-val="true" data-val-required="The isEnabled field is required." id="sectionCheckBox" name="[' + counter + '].sectionControlModel.isEnabled" type="checkbox" value="true" /><br /></td><td><input class="text w50 UX" name="[' + counter + '].SectionControlModel.Width"  id="textbox_' + counter + '" type="text" onfocus="previousValue(' + counter + ')"  onblur="CheckWidth(' + counter + ')" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].SectionControlModel.Width" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" name="StateIndex" type="text" value="' + stateIndexNo + '" readonly = "readonly" /></td><td><input class="text w50 UX" name="ConsolidatedWorkingStateID" type="text" value="1" readonly = "readonly" /></td>  </td><input data-val="true" data-val-number="The field FieldID must be a number." data-val-required="The FieldID field is required." name="[' + counter + '].FieldID" type="hidden" value="76" /><input data-val="true" data-val-number="The field Type must be a number." data-val-required="The Type field is required." name="[' + counter + '].Type" type="hidden" value="1" /><input name="[' + counter + '].Fieldname" type="hidden" value="Section" /><td><img src="/images/remove.png" style="height:25px;width:25px" onclick="deleteSections(' + counter + ');"/></tr>').appendTo('#sections');
                                                    //if (lastValue == 0) {
                                                    //    sectionNo++;
                                                    //    stateIndexNo++;

                                                    //}
                                                    if (lastValue != 60 && lastValue!=0) {
                                                        var row = document.getElementById(lastValue);
                                                        var removeImage = row.children[8];
                                                        row.removeChild(removeImage);
                                                        
                                                    }
                                                    sectionNo++;
                                                    stateIndexNo++;
                                                    lastValue = counter;
                                                    counter++;
                                                }
                                            }

                                            function deleteSections(id) {
                                                if (isPageLoad) {
                                                  onPageLoad();
                                                }
                                                var row = document.getElementById(id);
                                                totalSectionWidth = totalSectionWidth - $('#textbox_' + id).val();
                                                row.parentNode.removeChild(row);
                                                //$('<tr><input type="hidden" value="76" name="[' + id + '].FieldID" data-val-required="The FieldID field is required." data-val-number="The field FieldID must be a number." data-val="true"><input type="hidden" value="1" name="[' + id + '].Type" data-val-required="The Type field is required." data-val-number="The field Type must be a number." data-val="true"><input type="hidden" value="Section" name="[' + id + '].Fieldname"> </tr>').appendTo('#sections');
                                                lastValue--;
                                            
                                           
                                                if (lastValue != 60) {
                                                    var row = document.getElementById(lastValue);
                                                    var td = document.createElement('td');
                                                    var img = document.createElement('img');
                                                    img.setAttribute('src', "/images/remove.png");
                                                    img.setAttribute('style', "height:25px;width:25px");
                                                    img.setAttribute('onclick', "deleteSections('" + lastValue + "');");
                                                    td.appendChild(img);
                                                    row.appendChild(td);
                                                    stateIndexNo--;
                                                    sectionNo--;
                                                
                                                }
                                                else {
                                                    sectionNo = 1;
                                                    stateIndexNo = 0;
                                                    lastValue = 0;
                                               
                                                }
                                                counter--;
                                            }

                                       
</script>               
                    </div>

             <h3>WebSocket Response</h3>
            <div>
                <table cellspacing="0" cellpadding="0" border="0" class="stimulationparameter" id="websocketResponse">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>

                        @for (var i = 0; i < @Model.Count; i++)
                        {


                            if (@Model[i].FieldID == 53)
                            { 
                        
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                                                    
                            }



                            if (@Model[i].FieldID == 54)
                            {
                            <tr>
                                <td>
                                    <h4>Enable Plotting:</h4>
                                </td>
                                
                                <td>

                                    

                                    @if (@Model[i].RandomData.Value != null)
                                    {
                                       
                                        @Html.CheckBoxFor(m => m[i].RandomData.boolValue, new { @class = "text w50", @checked = @Model[i].RandomData.boolValue })<br />
                                        @Html.ValidationMessageFor(m => m[i].RandomData.boolValue)
                                    
                                    }
                                    else
                                    {
                                       
                                        @Html.CheckBoxFor(m => m[i].RandomData.boolValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].RandomData.boolValue)
                                    
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                 <td>
                                      <img src="~/images/info_button.png" id="EnablePlotting" class="handCursor"/>
                                    <div id="EnablePlottingDialog" title="EnablePlotting Descriptor">
                                    <p>@HarvestResource.EnablePlottingDescription</p>
                                    </div>
                                </td>
                                                            </tr>
                            
                            }

                            if (@Model[i].FieldID == 77)
                            {
                            <tr>
                                <td>
                                    <h4>Resume Plotting:</h4>
                                </td>
                                
                                <td>

                                    

                                    @if (@Model[i].RandomData.Value != null)
                                    {
                                       
                                        @Html.CheckBoxFor(m => m[i].RandomData.boolValue, new { @class = "text w50", @checked = @Model[i].RandomData.boolValue })<br />
                                        @Html.ValidationMessageFor(m => m[i].RandomData.boolValue)
                                    
                                    }
                                    else
                                    {
                                       
                                        @Html.CheckBoxFor(m => m[i].RandomData.boolValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].RandomData.boolValue)
                                    
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                 @*<td>
                                      <img src="~/images/info_button.png" id="EnablePlotting" class="handCursor"/>
                                    <div id="EnablePlottingDialog" title="EnablePlotting Descriptor">
                                    <p>@HarvestResource.EnablePlottingDescription</p>
                                    </div>
                                </td>*@
                                                            </tr>
                            
                            }

                            if (@Model[i].FieldID == 33)
                            {
                            <tr>
                                <td>
                                    <h4>Responses per Second:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="ResponsesPerSecond" class="handCursor"/>
                                    <div id="ResponsesPerSecondDialog" title="ResponsesPerSecond Descriptor">
                                    <p>@HarvestResource.ResponsesPerSecondDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }
                            if (@Model[i].FieldID == 39)
                            {
                            <tr>
                                <td>
                                    <h4>DataEpochs per ChunkSeqNumber:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].FieldValue != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].FieldValue, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].FieldValue)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                      <img src="~/images/info_button.png" id="EpochsPerChunk" class="handCursor"/>
                                    <div id="EpochsPerChunkDialog" title="EpochsPerChunk Descriptor">
                                    <p>@HarvestResource.EpochsPerChunkDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }
                            if (@Model[i].FieldID == 49)
                            {
                            <tr>
                                <td>
                                    <h4>Chunks per Session:</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="ChunksPerSession" class="handCursor"/>
                                    <div id="ChunksPerSessionDialog" title="ChunksPerSession Descriptor">
                                    <p>@HarvestResource.ChunksPerSessionDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }

                        }
                    </tbody>
                    </table>
            </div>
            

             <h3>Historical Plotting</h3>
            <div>
                <table cellspacing="0" cellpadding="0" border="0" class="stimulationparameter">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>

                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].FieldID == 50)
                            {
                            <tr>
                                <td>
                                    <h4>Skip Session</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                               <td>
                                     <img src="~/images/info_button.png" id="SkipSession" class="handCursor"/>
                                    <div id="SkipSessionDialog" title="SkipSession Descriptor">
                                    <p>@HarvestResource.SkipSessionDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }
                            if (@Model[i].FieldID == 62)//100
                            {
                            <tr>
                                <td>
                                    <h4>Skip Start Session</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="SkipStartSession" class="handCursor"/>
                                    <div id="SkipStartSessionDialog" title="SkipStartSession Descriptor">
                                    <p>@HarvestResource.SkipStartSessionDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }
                            if (@Model[i].FieldID == 63)
                            {
                            <tr>
                                <td>
                                    <h4>Skip End Session</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="SkipEndSession" class="handCursor"/>
                                    <div id="SkipEndSessionDialog" title="SkipEndSessions Descriptor">
                                    <p>@HarvestResource.SkipEndSessionDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }
                            if (@Model[i].FieldID == 51)
                            {
                            <tr>
                                <td>
                                    <h4>Skip Random Chunks</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                 <td>
                                     <img src="~/images/info_button.png" id="SkipRandomChunks" class="handCursor"/>
                                    <div id="SkipRandomChunksDialog" title="SkipRandomChunks Descriptor">
                                    <p>@HarvestResource.SkipRandomChunksDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }
                            if (@Model[i].FieldID == 52)
                            {
                            <tr>
                                <td>
                                    <h4>Skip Random Epochs</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                 <td>
                                     <img src="~/images/info_button.png" id="SkipRandomEpochs" class="handCursor"/>
                                    <div id="SkipRandomEpochsDialog" title="SkipRandomEpochs Descriptor">
                                    <p>@HarvestResource.SkipRandomEpochsDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }

                            if (@Model[i].FieldID == 64)
                            {
                            <tr>
                                <td>
                                    <h4>Change CFF</h4>
                                </td>
                                <td>
                                    @if (@Model[i].RandomData != null)
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m[i].RandomData.Value, new { @class = "text w50", Value = "" })
                                        @Html.ValidationMessageFor(m => m[i].RandomData.Value)
                                    }
                                    @Html.HiddenFor(m => m[i].FieldID)
                                    @Html.HiddenFor(m => m[i].Type)
                                     @Html.HiddenFor(m => m[i].Fieldname)
                                </td>
                                <td>
                                     <img src="~/images/info_button.png" id="ChangeCFF" class="handCursor"/>
                                    <div id="ChangeCFFDialog" title="ChangeCFF Descriptor">
                                    <p>@HarvestResource.ChangeCFFDescription</p>
                                    </div>
                                </td>
                            </tr>
                            
                            }


                        }
                    </tbody>
                    </table>
            </div>



            <h3>Locations</h3>
            <div>
                <table cellspacing="0" cellpadding="0" border="0" id="locations">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>Origin</th>
                           @*<th>Maximum</th>
                            <th>Step</th>
                            <th>Cycle</th>*@
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].Type == 1)
                            {
                                if (@Model[i].FieldID == 6)
                                { 
                            <tr>
                                <td>
                                    <h4>X(Degrees)</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    <td class="alignLeft">@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>*@
                                }
                                else
                                {
                                    <td class="alignLeft">@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>*@
                                }
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                                <td class="alignLeft pl1">
                                <img src="~/images/info_button.png" id="OriginX" class="handCursor"/>
                                    <div id="OriginXDialog" title="OriginX Descriptor">
                                    <p>@HarvestResource.OriginXDescription</p>
                                    </div>
                                </td>
                            </tr>
                                }

                                if (@Model[i].FieldID == 7)
                                { 
                            <tr>
                                <td>
                                    <h4>Y(Degrees)</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    <td class="alignLeft">@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>*@
                                }
                                else
                                {
                                    <td class="alignLeft">@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>*@
                                }
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                                <td class="alignLeft pl1">
                                <img src="~/images/info_button.png" id="OriginY" class="handCursor"/>
                                    <div id="OriginYDialog" title="OriginY Descriptor">
                                    <p>@HarvestResource.OriginYDescription</p>
                                    </div>
                                </td>
                            </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>

           @*<h3>Heading</h3>
            <div>
                <table cellspacing="0" cellpadding="0" border="0">
                    <thead>
                        <tr>
                            <th>Minimum</th>
                            <th>Maximum</th>
                            <th>Step</th>
                            <th>Cycle</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].Type == 1)
                            {
                                if (@Model[i].FieldID == 8)
                                { 
                            <tr>
                                <td>
                                    <h4>Heading</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                            </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>*@

            @*<h3>Ag Result</h3>*@
          @*  <div>
                <table cellspacing="0" cellpadding="0" border="0">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>Minimum</th>
                            <th>Maximum</th>
                            <th>Step</th>
                            <th>Cycle</th>
                        </tr>
                    </thead>
                    <tbody>*@
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].Type == 1)
                            {
                                if (@Model[i].FieldID == 27)
                                { 
                            @*<tr>*@
                                @*<td>
                                    <h4>3</h4>
                                </td>*@
                                @*@if (@Model[i].DataGenerator != null)
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }*@

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            @*</tr>*@
                                }

                                if (@Model[i].FieldID == 28)
                                { 
                            @*<tr>*@
                               @*<td>
                                    <h4>4</h4>
                                </td>*@
                                @*@if (@Model[i].DataGenerator != null)
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }*@

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            @*</tr>*@
                                }

                                @*if (@Model[i].FieldID == 20)
                                { 
                            <tr>
                                <td>
                                    <h4>Ground Speed</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }

                                if (@Model[i].FieldID == 21)
                                { 
                            <tr>
                                <td>
                                    <h4>Gage Wheel Margin</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td> *@   
                                   @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
   }

                                if (@Model[i].FieldID == 22)
                                { 
                            <tr>
                                <td>
                                    <h4>Applied DownForce</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }
                                if (@Model[i].FieldID == 23)
                                { 
                            <tr>
                                <td>
                                    <h4>Actual Population</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }
                                if (@Model[i].FieldID == 24)
                                { 
                            <tr>
                                <td>
                                    <h4>Singulation %</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }
                                if (@Model[i].FieldID == 25)
                                { 
                            <tr>
                                <td>
                                    <h4>Seed Spacing</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }

                                if (@Model[i].FieldID == 26)
                                { 
                            <tr>
                                <td>
                                    <h4>Ride Quality</h4>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                else
                                {*@
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                }
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }*@

                            }
                        }
                  @*  </tbody>
                </table>
            </div>*@

            @*
             <h3>Sample Data UX</h3>
            <div>
                <section>
                <table cellspacing="0" cellpadding="0" border="0">
                    <thead>
                        <tr>                           
                             <th>&nbsp;</th>
                            <th>DataID</th>
                            <th>RepDomainID</th>
                            <th>ColorSpace</th>
                            <th>Color</th>
                            <th>Frequency</th>
                            <th>Num of Epochs</th>
                            <th>Add More</th>
                        </tr>
                    </thead>
                   <tbody></tbody>
                        </table>
                    </section>
                </div>
            *@


            <h3>Data Point</h3>
            <div>
                <section>
                <table cellspacing="0" cellpadding="0" border="0" id="datapoint">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            @*<th>DisplayIndexID</th>*@
                            <th>Minimum &nbsp
                                <img src="~/images/info_button.png" id="Minimum" class="handCursor"/>
                                    <div id="MinimumDialog" title="Minimum Descriptor">
                                    <p>@HarvestResource.MinimumDescription</p>
                                    </div>
                               </th>
                            <th>Maximum &nbsp
                                <img src="~/images/info_button.png" id="Maximum" class="handCursor"/>
                                    <div id="MaximumDialog" title="Maximum Descriptor">
                                    <p>@HarvestResource.MaximumDescription</p>
                                    </div>
                            </th>
                            <th>Step &nbsp
                                <img src="~/images/info_button.png" id="Step" class="handCursor"/>
                                    <div id="StepDialog" title="Step Descriptor">
                                    <p>@HarvestResource.StepDescription</p>
                                    </div>
                            </th>
                            <th>Cycle &nbsp
                                <img src="~/images/info_button.png" id="Cycle" class="handCursor"/>
                                    <div id="CycleDialog" title="Cycle Descriptor">
                                    <p>@HarvestResource.CycleDescription</p>
                                    </div></th>
                            <th>Randomize &nbsp
                                <img src="~/images/info_button.png" id="Randomize" class="handCursor"/>
                                    <div id="RandomizeDialog" title="Randomize Descriptor">
                                    <p>@HarvestResource.RandomizeDescription</p>
                                    </div></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].Type == 1)
                            {
                                if (@Model[i].FieldID == 24)
                                { 
                            <tr>
                                <td>
                                    <h4>Dry Yield &nbsp
                                    <img src="~/images/info_button.png" id="DryYield" class="handCursor"/>
                                   </h4>
                                     <div id="DryYieldDialog" title="DryYield Descriptor">
                                    <p>@HarvestResource.DryYieldDescription</p></div>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                     <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Randomize })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }
                                else
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }

                                if (@Model[i].FieldID == 21)
                                { 
                            <tr>
                                <td>
                                    <h4>Wet Yield &nbsp
                                        <img src="~/images/info_button.png" id="WetYield" class="handCursor"/>
                                    </h4>
                                     <div id="WetYieldDialog" title="WetYield Descriptor">
                                    <p>@HarvestResource.WetYieldDescription</p></div>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Randomize })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }
                                else
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td> *@   
                                   <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }

                                if (@Model[i].FieldID == 22)
                                { 
                            <tr>
                                <td>
                                    <h4>Moisture &nbsp
                                        <img src="~/images/info_button.png" id="Moisture" class="handCursor"/>
                                   </h4>
                                     <div id="MoistureDialog" title="Moisture Descriptor">
                                    <p>@HarvestResource.MoistureDescription</p></div>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Randomize })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }
                                else
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }
                                if (@Model[i].FieldID == 23)
                                { 
                            <tr>
                                <td>
                                    <h4>YawRate &nbsp 
                                        <img src="~/images/info_button.png" id="YawRate" class="handCursor"/>
                                   </h4>
                                     <div id="YawRateDialog" title="YawRate Descriptor">
                                    <p>@HarvestResource.YawRateDescription</p></div>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Randomize })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }
                                else
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }
                                if (@Model[i].FieldID == 20)
                                { 
                            <tr>
                                <td>
                                    <h4>Speed &nbsp 
                                        <img src="~/images/info_button.png" id="Speed" class="handCursor"/>
                                   </h4>
                                     <div id="SpeedDialog" title="Speed Descriptor">
                                    <p>@HarvestResource.SpeedDescription</p></div>
                                </td>
                                @if (@Model[i].DataGenerator != null)
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Cycle })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50", @checked = @Model[i].DataGenerator.DataPattern.Randomize })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }
                                else
                                {
                                    @*<td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.DisplayIndexID)
                                    </td>*@   
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MinimumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MinimumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.MaximumValue, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.MaximumValue)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataGenerator.DataPattern.Step, new { @class = "text w50", Value = "" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Step)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Cycle, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Cycle)
                                    </td>
                                    <td>@Html.CheckBoxFor(m => m[i].DataGenerator.DataPattern.Randomize, new { @class = "text w50" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataGenerator.DataPattern.Randomize)
                                    </td>
                                }

                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                            </tr>
                                }
                                if (@Model[i].FieldID == 25)
                                { 
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)                
                                }

                                if (@Model[i].FieldID == 26)
                                { 
                            
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)                            
                                }

                                if (@Model[i].FieldID == 35)
                                { 
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)                            
                                }


                                if (@Model[i].FieldID == 38)
                                {                            
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)                           
                                }

                            }
                        }
                    </tbody>
                </table>
                    </section>

                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].FieldID == 36)
                            {
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)
                         
                            }

                            if (@Model[i].FieldID == 37)
                            { 
                           
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                                @Html.HiddenFor(m => m[i].Fieldname)                           
                            }

                            if (@Model[i].FieldID == 8)
                            { 
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)
                             @Html.HiddenFor(m => m[i].Fieldname)
                            }


                        }
            </div>


           @*<h3>Data UX1</h3>
            <div>
               <section id ="dataUXSection">
                  
                 
       
                <table cellspacing="0" cellpadding="0" border="0" id="dataUX" >
                    <thead>
                        <tr>
                            <th>DataID &nbsp
                                <img src="~/images/info_button.png" id="DataID" class="handCursor"/>
                                    <div id="DataIDDialog" title="DataID Descriptor">
                                    <p>@HarvestResource.DataIDDescription</p>
                                    </div></th>
                            <th>RepDomainID &nbsp
                                <img src="~/images/info_button.png" id="RepDomainID" class="handCursor"/>
                                    <div id="RepDomainIDDialog" title="RepDomainID Descriptor">
                                    <p>@HarvestResource.RepDomainIDDescription</p>
                                    </div></th>
                            <th>ColorSpace &nbsp
                                <img src="~/images/info_button.png" id="ColorSpace" class="handCursor"/>
                                    <div id="ColorSpaceDialog" title="ColorSpace Descriptor">
                                    <p>@HarvestResource.ColorSpaceDescription</p>
                                    </div></th>
                            <th>Color &nbsp
                                <img src="~/images/info_button.png" id="Color" class="handCursor"/>
                                    <div id="ColorDialog" title="Color Descriptor">
                                    <p>@HarvestResource.ColorDescription</p>
                                    </div></th>
                            <th>Frequency &nbsp
                                <img src="~/images/info_button.png" id="Frequency" class="handCursor"/>
                                    <div id="FrequencyDialog" title="Frequency Descriptor">
                                    <p>@HarvestResource.FrequencyDescription</p>
                                    </div></th>
                            <th>Num of Epochs &nbsp
                                <img src="~/images/info_button.png" id="NumOfEpochs" class="handCursor"/>
                                    <div id="NumOfEpochsDialog" title="NumOfEpochs Descriptor">
                                    <p>@HarvestResource.NumOfEpochsDescription</p>
                                    </div></th>
                        </tr>
                    </thead>
                    <tbody>*@
                                                
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].FieldID == 55)
                            { 
                           @* <tr id=@i>
                                                               
                                @if (@Model[i].DataUXModel != null)
                                {
                                    <td>@Html.TextBoxFor(m => m[i].DataUXModel.DataID, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataUXModel.DataID)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataUXModel.RepDomainID, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataUXModel.RepDomainID)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataUXModel.ColorSpace, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataUXModel.ColorSpace)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataUXModel.Color, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataUXModel.Color)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataUXModel.Frequency, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataUXModel.Frequency)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].DataUXModel.NoOfEpochs, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].DataUXModel.NoOfEpochs)
                                    </td>
                                    <td>
                                    <img src="~/images/remove.png" style="height:25px;width:25px" onclick="deleteRow(@i);"/>
                                    </td>
                                }*@
                              
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)                                
                                @Html.HiddenFor(m => m[i].Fieldname)
                            @*</tr>*@
                            }



                        }


                   @* </tbody>
                </table>
 

                    <input type="button" class="button mt2 mb1" id="addnew" value="Add" />
        


<script type="text/javascript">


    function deleteRow(id) {
        alert(id);
        var row = document.getElementById(id);
        row.parentNode.removeChild(row);
        
        $('<tr><input type="hidden" value="55" name="[' + id + '].FieldID" data-val-required="The FieldID field is required." data-val-number="The field FieldID must be a number." data-val="true"><input type="hidden" value="1" name="[' + id + '].Type" data-val-required="The Type field is required." data-val-number="The field Type must be a number." data-val="true"><input type="hidden" value="DataUX" name="[' + id + '].Fieldname"> </tr>').appendTo('#dataUX');
        
    }

    
</script>
                  

                </section>
                          
                
             

                      

            </div>*@

              @* <h3>Brand Information</h3>
            <div>

               <section id ="BrandSection">
                  
                 
       
<table cellspacing="0" cellpadding="0" border="0" id="BrandInformation" style="width:40%">
                    <thead>
                        <tr>
                            <th>BrandErid &nbsp
                                <img src="~/images/info_button.png" id="BrandErid" class="handCursor"/>
                                    <div id="BrandEridDialog" title="BrandErid Descriptor">
                                    <p>@HarvestResource.BrandEridDescription</p>
                                    </div></th>
                            <th>BrandName &nbsp
                                <img src="~/images/info_button.png" id="BrandName" class="handCursor"/>
                                    <div id="BrandNameDialog" title="BrandName Descriptor">
                                    <p>@HarvestResource.BrandNameDescription</p>
                                    </div></th>                                                    
                        </tr>
                    </thead>
                    <tbody>*@
                                                
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].FieldID == 59)
                            { 
                           @* <tr id=@i>
                                                               
                                @if (@Model[i].BrandModel != null)
                                {
                                    <td>@Html.TextBoxFor(m => m[i].BrandModel.BrandID, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].BrandModel.BrandID)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].BrandModel.BrandName, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].BrandModel.BrandName)
                                    </td>
                                                                  
                                    <td>
                                    <img src="~/images/remove.png" style="height:25px;width:25px" onclick="deleteBrand(@i);"/>
                                    </td>
                                }*@
                              
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)                                
                                @Html.HiddenFor(m => m[i].Fieldname)
                           @* </tr>*@
                            }



                        }


                    @*</tbody>
                </table>
 

                    <input type="button" class="button mt2 mb1" id="addBrand" value="Add" />
        


<script type="text/javascript">


   
    function deleteBrand(id) {

        var row = document.getElementById(id);
        row.parentNode.removeChild(row);
        $('<tr><input type="hidden" value="55" name="[' + id + '].FieldID" data-val-required="The FieldID field is required." data-val-number="The field FieldID must be a number." data-val="true"><input type="hidden" value="1" name="[' + id + '].Type" data-val-required="The Type field is required." data-val-number="The field Type must be a number." data-val="true"><input type="hidden" value="DataUX" name="[' + id + '].Fieldname"> </tr>').appendTo('#BrandInformation');

    }


</script>
                  

                </section>
                          
                
             

                      

            </div>*@

              @* <h3>Crop Information</h3>
            <div>

               <section id ="BrandSection">
                  
                 
       
<table cellspacing="0" cellpadding="0" border="0" id="CropInformation" style="width:40%">
                    <thead>
                        <tr>
                            <th>EICCropID &nbsp
                                <img src="~/images/info_button.png" id="CropID" class="handCursor"/>
                                    <div id="CropIDDialog" title="CropID Descriptor">
                                    <p>@HarvestResource.CropIDDescription</p>
                                    </div></th>
                            <th>CropName &nbsp
                                <img src="~/images/info_button.png" id="CropName" class="handCursor"/>
                                    <div id="CropNameDialog" title="CropName Descriptor">
                                    <p>@HarvestResource.CropNameDescription</p>
                                    </div></th>                                                    
                        </tr>
                    </thead>
                    <tbody>*@
                                                
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].FieldID == 60)
                            {
                               
                            @*<tr id=@i>
                                                               
                                @if (@Model[i].CropModel != null)
                                {
                                   
                                    <td>@Html.TextBoxFor(m => m[i].CropModel.Erid, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].CropModel.Erid)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].CropModel.CropName, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].CropModel.CropName)
                                    </td>
                                                                  
                                    <td>
                                    <img src="~/images/remove.png" style="height:25px;width:25px" onclick="deleteCrop(@i);"/>
                                    </td>
                                }*@
                              
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)                                
                                @Html.HiddenFor(m => m[i].Fieldname)
                          @*  </tr>*@
                            }



                        }


                   @* </tbody>
                </table>
 

                    <input type="button" class="button mt2 mb1" id="addCrop" value="Add" />
        
                                

<script type="text/javascript">


    $(document).ready(function () {
        var counter = @Model.Count
      
       
           $('#addnew').click(function () {
               $('<tr id='+counter+'><td><input class="text w50 UX" type="text" value="" name="[' + counter + '].DataUXModel.DataID" data-val-number="The field DataID must be a number." data-val="true"><br><span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="[' + counter + '].DataUXModel.DataID"></span> </td><td><input class="text w50 UX" type="text" value="" name="[' + counter + '].DataUXModel.RepDomainID" data-val-number="The field RepDomainID must be a number." data-val="true"><br><span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="[' + counter + '].DataUXModel.RepDomainID"></span></td><td><input class="text w50 UX" type="text" value="" name="[' + counter + '].DataUXModel.ColorSpace" data-val-number="The field ColorSpace must be a number." data-val="true"><br><span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="[' + counter + '].DataUXModel.ColorSpace"></span></td><td><input class="text w50 UX" type="text" value="" name="[' + counter + '].DataUXModel.Color"><br><span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="[' + counter + '].DataUXModel.Color"></span></td><td><input class="text w50 UX" type="text" value="" name="[' + counter + '].DataUXModel.Frequency" data-val-number="The field Frequency must be a number." data-val="true"><br><span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="[' + counter + '].DataUXModel.Frequency"></span></td><td><input class="text w50 UX" type="text" value="" name="[' + counter + '].DataUXModel.NoOfEpochs" data-val-number="The field NoOfEpochs must be a number." data-val="true"><br><span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="[' + counter + '].DataUXModel.NoOfEpochs"></span></td><td><img src="/images/remove.png" style="height:25px;width:25px" onclick="deleteRow('+counter+');"/></td><input type="hidden" value="55" name="[' + counter + '].FieldID" data-val-required="The FieldID field is required." data-val-number="The field FieldID must be a number." data-val="true"><input type="hidden" value="1" name="[' + counter + '].Type" data-val-required="The Type field is required." data-val-number="The field Type must be a number." data-val="true"><input type="hidden" value="DataUX" name="[' + counter + '].Fieldname"> </tr>').appendTo('#dataUX');
               counter++;
               return false;
           });

        $('#addBrand').click(function () {

            $('<tr id=' + counter + '><td><input class="text w50 UX" name="[' + counter + '].BrandModel.BrandID" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].BrandModel.BrandID" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-required="BrandName is required." name="[' + counter + '].BrandModel.BrandName" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].BrandModel.BrandName" data-valmsg-replace="true"></span></td><td><img src="/images/remove.png" style="height:25px;width:25px" onclick="deleteBrand(' + counter + ');"/></td><input data-val="true" data-val-number="The field FieldID must be a number." data-val-required="The FieldID field is required." name="[' + counter + '].FieldID" type="hidden" value="59" /><input data-val="true" data-val-number="The field Type must be a number." data-val-required="The Type field is required." name="[' + counter + '].Type" type="hidden" value="0" /><input name="[' + counter + '].Fieldname" type="hidden" value="TEST" /></tr>').appendTo('#BrandInformation');

            counter++;
            return false;
        });

        $('#addCrop').click(function () {

            $('<tr id=' + counter + '><td><input class="text w50 UX" name="[' + counter + '].CropModel.Erid" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].CropModel.Erid" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-required="BrandName is required." name="[' + counter + '].CropModel.CropName" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].CropModel.CropName" data-valmsg-replace="true"></span></td><td><img src="/images/remove.png" style="height:25px;width:25px" onclick="deleteCrop(' + counter + ');"/></td><input data-val="true" data-val-number="The field FieldID must be a number." data-val-required="The FieldID field is required." name="[' + counter + '].FieldID" type="hidden" value="60" /><input data-val="true" data-val-number="The field Type must be a number." data-val-required="The Type field is required." name="[' + counter + '].Type" type="hidden" value="0" /><input name="[' + counter + '].Fieldname" type="hidden" value="" /></tr>').appendTo('#CropInformation');

            counter++;
            return false;
        });

        $('#addVariety').click(function () {
         
            var brandDropdown = '@ViewBag.brandDropdown'
            var cropDropDown = '@ViewBag.cropDropDown'
            var brandList = brandDropdown.split(";");
            var cropList = cropDropDown.split(";");

            var brandDropdown;//' <select id="[0].VarietyModel.BrandGuid" name="[0].VarietyModel.BrandGuid">';
            for (var i = 0; i < brandList.length; i++) {
                var selected = 'selected="selected"';
                brandDropdown += '<option value="' + brandList[i].split(":")[0] + '">' + brandList[i].split(":")[1] + '</option>';
            }
            //brandDropdown += '</select>';
           
            var cropDropDown;// ' <select id="cropValue" name="cropValue">';
            for (var i = 0; i < cropList.length; i++) {
                var selected = 'selected="selected"';
                cropDropDown += '<option  value="' + cropList[i].split(":")[0] + '">' + cropList[i].split(":")[1] + '</option>';
            }
            //cropDropDown += '</select>';

            
            

            if (brandList.length > 0 && cropList.length > 0) {
                $('<tr id=' + counter + '><td><input class="text w50 UX" name="[' + counter + '].VarietyModel.Erid" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.Erid" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-required="Name is required." name="[' + counter + '].VarietyModel.Name" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.Name" data-valmsg-replace="true"></span></td><td><select name="[' + counter + '].VarietyModel.BrandGuid">' + brandDropdown + '</select>  <br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.BrandGuid" data-valmsg-replace="true"></span></td><td><select name="[' + counter + '].VarietyModel.CropID">' + cropDropDown + '</select>  <br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.CropID" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-required="Color Value is required." name="[' + counter + '].VarietyModel.Color" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.Color" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-number="The field ColorSpace must be a number." data-val-required="ColorSpace Value is required." name="[' + counter + '].VarietyModel.ColorSpace" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.ColorSpace" data-valmsg-replace="true"></span></td><td><img src="/images/remove.png" style="height:25px;width:25px" onclick="deleteVarietyRow(' + counter + ');"/></td><input data-val="true" data-val-number="The field FieldID must be a number." data-val-required="The FieldID field is required." name="[' + counter + '].FieldID" type="hidden" value="58" /><input data-val="true" data-val-number="The field Type must be a number." data-val-required="The Type field is required." name="[' + counter + '].Type" type="hidden" value="0" /><input name="[' + counter + '].Fieldname" type="hidden" value="Variety" /></tr>').appendTo("#VarietyInformation");
                //$('<tr id=' + counter + '><td><input class="text w50 UX" name="[' + counter + '].VarietyModel.Erid" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.Erid" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-required="Name is required." name="[' + counter + '].VarietyModel.Name" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.Name" data-valmsg-replace="true"></span></td><td>' + brandDropdown + '  <br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.BrandGuid" data-valmsg-replace="true"></span></td><td>' + cropDropDown + ' <br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.CropID" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-required="Color Value is required." name="[' + counter + '].VarietyModel.Color" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.Color" data-valmsg-replace="true"></span></td><td><input class="text w50 UX" data-val="true" data-val-number="The field ColorSpace must be a number." data-val-required="ColorSpace Value is required." name="[' + counter + '].VarietyModel.ColorSpace" type="text" value="" /><br /><span class="field-validation-valid" data-valmsg-for="[' + counter + '].VarietyModel.ColorSpace" data-valmsg-replace="true"></span></td><td><img src="/images/remove.png" style="height:25px;width:25px" onclick="deleteVarietyRow(' + counter + ');"/></td><input data-val="true" data-val-number="The field FieldID must be a number." data-val-required="The FieldID field is required." name="[' + counter + '].FieldID" type="hidden" value="58" /><input data-val="true" data-val-number="The field Type must be a number." data-val-required="The Type field is required." name="[' + counter + '].Type" type="hidden" value="0" /><input name="[' + counter + '].Fieldname" type="hidden" value="Variety" /></tr>').appendTo("#VarietyInformation");

                counter++;
            }
            else {
                if (brandList.length == 0) {
                    alert("There is no brand details available to add variety.")
                } else if (cropList.length == 0) {
                    alert("There is no crop details available to add variety.")
                }
            }
               
           
            return false;
        });

    });

    function deleteCrop(id) {

        var row = document.getElementById(id);
        row.parentNode.removeChild(row);
        $('<tr><input type="hidden" value="55" name="[' + id + '].FieldID" data-val-required="The FieldID field is required." data-val-number="The field FieldID must be a number." data-val="true"><input type="hidden" value="1" name="[' + id + '].Type" data-val-required="The Type field is required." data-val-number="The field Type must be a number." data-val="true"><input type="hidden" value="DataUX" name="[' + id + '].Fieldname"> </tr>').appendTo('#BrandInformation');

    }


</script>
                  

                </section>
                          
                
             

                      

            </div>*@
                       
               @*<h3>Variety Information</h3>
            <div>

               <section id ="varietySection">
                  
                 
       
<table cellspacing="0" cellpadding="0" border="0" id="VarietyInformation" >
                    <thead>
                        <tr>
                            <th>Erid</th>
                            <th>Name</th>
                            <th>Brand</th>
                            <th>Crop</th>
                            <th>Color</th>
                            <th>ColorSpace</th>                           
                        </tr>
                    </thead>
                    <tbody>*@
                               
                                          
                        @for (var i = 0; i < @Model.Count; i++)
                        {
                            if (@Model[i].FieldID == 58)
                            { 
                            @*<tr id=@i>
                                                               
                                @if (@Model[i].VarietyModel != null && brandItems.Count > 0 && cropItems.Count > 0)
                                {
                                    <td>@Html.TextBoxFor(m => m[i].VarietyModel.Erid, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].VarietyModel.Erid)
                                    </td>
                                    <td>@Html.TextBoxFor(m => m[i].VarietyModel.Name, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].VarietyModel.Name)
                                    </td>                                                                   
                                    
                                      <td>
                                     @{
                                    var brandValue = brandItems.Where(elm => elm.Value.Equals(Model[i].VarietyModel.BrandGuid)).Select(elm => elm.Value).FirstOrDefault();
                                          }
                                           @Html.DropDownListFor(m => m[i].VarietyModel.BrandGuid, new SelectList(brandItems, "Value", "Text", Model[i].VarietyModel.BrandGuid))  <br />
                                        @Html.ValidationMessageFor(m => m[i].VarietyModel.BrandGuid)
                                    </td>
                                     <td>
                                       @{
                                    var cropValue = cropItems.Where(elm => elm.Value.Equals(Model[i].VarietyModel.CropID.ToString())).Select(elm => elm.Value).FirstOrDefault();
                                          }
                                     @Html.DropDownListFor(m => m[i].VarietyModel.CropID, new SelectList(cropItems, "Value", "Text", Model[i].VarietyModel.CropID))  <br />                                    
                                        @Html.ValidationMessageFor(m => m[i].VarietyModel.CropID)
                                    </td>
                                      <td>@Html.TextBoxFor(m => m[i].VarietyModel.Color, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].VarietyModel.Color)
                                    </td>
                                      <td>@Html.TextBoxFor(m => m[i].VarietyModel.ColorSpace, new { @class = "text w50 UX" })<br />
                                        @Html.ValidationMessageFor(m => m[i].VarietyModel.ColorSpace)
                                    </td>
                                                                  
                                    <td>
                                    <img src="~/images/remove.png" style="height:25px;width:25px" onclick="deleteVarietyRow(@i);"/>
                                    </td>
                                }*@
                              
                                @Html.HiddenFor(m => m[i].FieldID)
                                @Html.HiddenFor(m => m[i].Type)                                
                                @Html.HiddenFor(m => m[i].Fieldname)
                          @*  </tr>*@
                            }



                        }
                         
                                      
                

                    @*</tbody>
                </table>
 

                    <input type="button" class="button mt2 mb1" id="addVariety" value="Add" />
        
                   
                    


<script type="text/javascript">

    function deleteVarietyRow(id) {

        var row = document.getElementById(id);
        row.parentNode.removeChild(row);

        $('<tr><input type="hidden" value="55" name="[' + id + '].FieldID" data-val-required="The FieldID field is required." data-val-number="The field FieldID must be a number." data-val="true"><input type="hidden" value="1" name="[' + id + '].Type" data-val-required="The Type field is required." data-val-number="The field Type must be a number." data-val="true"><input type="hidden" value="DataUX" name="[' + id + '].Fieldname"> </tr>').appendTo('#dataUX');

    }


</script>
                  

                </section>
                          
                
             

                      

            </div>*@

        </div>
        <input class="button mt2 mb1" type="button" value="Save" onclick="CheckSimulationParameter();" /><img src="~/images/dialog-loader.gif" id="loadingImageHD" class="hide ml10" />
        <input id="startPlotting" class="button mt2 mb1" type="button" value="Start" onclick="StartSimulation();">
        <input id="stopPlotting" style="margin-left:25px" class="button mt2 mb1" type="button" value="Stop" onclick="StopSimulation();">
        <input id="resetSimulator" style="margin-left:25px" class="button mt2 mb1" type="button" value="Reset" onclick="ResetSimulator();">
        <label id ="commandMessage"  style="color:green;margin-left:20px; font-size:18px;"></label>
     }
    <script type="text/javascript">

       @* $(document).ready(function () {
            var sendEpoch = '@(ViewBag.ToggleSimulation)';                        
            if (sendEpoch == "True") {                
                document.getElementById('toggleSimulation').value = 'Stop';                     
            }
            else {                
                document.getElementById('toggleSimulation').value = 'Start';  
            }
               
        });*@
        
        function StartSimulation() {           
            $.ajax({
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("StartSimulation", "DataStimulate")',                
                dataType: 'json',               
                success: function (data) {
                    $('#commandMessage').text("Simulator Started.");
                },
                error: function (data) {
                    alert(data.status);
                },
            });
        }
        function StopSimulation() {            
            $.ajax({
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("StopSimulation", "DataStimulate")',
                dataType: 'json',
                success: function (data) {
                    $('#commandMessage').text("Simulator Stopped.");
                },
                error: function (data) {
                    alert(data.status);
                },
            });
        }
        
        function ResetSimulator() {
            $.ajax({
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("ResetSimulator", "DataStimulate")',
                dataType: 'json',
                success: function (data) {
                    $('#commandMessage').text("Simulator Reset.");
                },
                error: function (data) {
                    alert(data.status);
                },
            });
        }


        function CheckSimulationParameter(e) {
            if (totalSectionWidth != machineWidth)
            {
                alert("The sum of widths of Section must be equal to MachineWidth");
            }
                
            else {
                 var isSimulationParameterNull = false;
                var isSkipsMultiplesNull = false;
                $('.stimulationparameter tbody').find("input[type=text]").each(function () {
                    if ($(this).val() === '') {
                        isSimulationParameterNull = true;

                        //e.preventDefault();
                    }
                });

                $('#skipsandmultiples tbody').find("input[type=text]").each(function () {
                    if ($(this).val() === '') {
                        isSkipsMultiplesNull = true;
                        //e.preventDefault();
                    }
                });


                if (isSimulationParameterNull == false && isSkipsMultiplesNull == false) {
                    ShowLoadingImage();
                }
                else {
                    alert("Please enter values for all elements of Root and Skips and Multiples and Sections except Deactivated Sources");
                    $("#accordion").accordion({

                        active: 0
                    });
                }
            }
        }

        function ShowLoadingImage() {
            if ($('#SeedStarForm').valid()) {
                $('#SeedStarForm').submit();
                 @* for (var i = 0 ; i < 23 ; i++) {
                    if (i == 19) {
                        var i = 19;
                        var s = @Model[19].FieldValue
                         alert(s);
                        }
                    }*@
                $('#loadingImageHD').removeClass('hide');
                $('#loadingImageHD').addClass('show');
            }
        }
        $(function () {
            $("#FieldWidthDialog").dialog({
                autoOpen: false,
                modal: true,
                draggable: false
            });
            $("#FieldWidth").click(function () {
                $("#FieldWidthDialog").dialog("open");
            });

            $("#FieldHeightDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#FieldHeight").click(function () {
                $("#FieldHeightDialog").dialog("open");
            });

            $("#AccelerationFactorDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#AccelerationFactor").click(function () {
                $("#AccelerationFactorDialog").dialog("open");
            });
            $("#NoOfSourcesDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#NoOfSources").click(function () {
                $("#NoOfSourcesDialog").dialog("open");
            });

            $("#DeactivatedSourcesDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#DeactivatedSources").click(function () {
                $("#DeactivatedSourcesDialog").dialog("open");
            });
            $("#ClientDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Client").click(function () {
                $("#ClientDialog").dialog("open");
            });

            $("#FarmDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Farm").click(function () {
                $("#FarmDialog").dialog("open");
            });

            $("#FieldDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Field").click(function () {
                $("#FieldDialog").dialog("open");
            });

            $("#OperatorDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Operator").click(function () {
                $("#OperatorDialog").dialog("open");
            });

            $("#CropDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Crop").click(function () {
                $("#CropDialog").dialog("open");
            });

            $("#EnablePlottingDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#EnablePlotting").click(function () {
                $("#EnablePlottingDialog").dialog("open");
            });

            $("#ResponsesPerSecondDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#ResponsesPerSecond").click(function () {
                $("#ResponsesPerSecondDialog").dialog("open");
            });

            $("#EpochsPerChunkDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#EpochsPerChunk").click(function () {
                $("#EpochsPerChunkDialog").dialog("open");
            });

            $("#ChunksPerSessionDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#ChunksPerSession").click(function () {
                $("#ChunksPerSessionDialog").dialog("open");
            });

            $("#OriginXDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#OriginX").click(function () {
                $("#OriginXDialog").dialog("open");
            });
            $("#OriginYDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#OriginY").click(function () {
                $("#OriginYDialog").dialog("open");
            });

            $("#MinimumDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Minimum").click(function () {
                $("#MinimumDialog").dialog("open");
            });

            $("#MaximumDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Maximum").click(function () {
                $("#MaximumDialog").dialog("open");
            });

            $("#StepDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Step").click(function () {
                $("#StepDialog").dialog("open");
            });

            $("#CycleDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Cycle").click(function () {
                $("#CycleDialog").dialog("open");
            });

            $("#RandomizeDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Randomize").click(function () {
                $("#RandomizeDialog").dialog("open");
            });

            $("#SkipSessionDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#SkipSession").click(function () {
                $("#SkipSessionDialog").dialog("open");
            });
           
            $("#SkipEndSession").click(function () {
                $("#SkipEndSessionDialog").dialog("open");
            });
            $("#SkipEndSessionDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#SkipStartSessionDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#SkipStartSession").click(function () {
                $("#SkipStartSessionDialog").dialog("open");
            });
            $("#SkipRandomChunksDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#SkipRandomChunks").click(function () {
                $("#SkipRandomChunksDialog").dialog("open");
            });
            $("#SkipRandomEpochsDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#SkipRandomEpochs").click(function () {
                $("#SkipRandomEpochsDialog").dialog("open");
            });
            $("#ChangeCFFDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#ChangeCFF").click(function () {
                $("#ChangeCFFDialog").dialog("open");
            });

            $("#DataIDDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#DataID").click(function () {
                $("#DataIDDialog").dialog("open");
            });

            $("#RepDomainIDDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#RepDomainID").click(function () {
                $("#RepDomainIDDialog").dialog("open");
            });
            $("#ColorSpaceDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#ColorSpace").click(function () {
                $("#ColorSpaceDialog").dialog("open");
            });

            $("#ColorDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Color").click(function () {
                $("#ColorDialog").dialog("open");
            });

            $("#FrequencyDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Frequency").click(function () {
                $("#FrequencyDialog").dialog("open");
            });

            $("#NumOfEpochsDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#NumOfEpochs").click(function () {
                $("#NumOfEpochsDialog").dialog("open");
            });

            $("#BrandEridDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#BrandErid").click(function () {
                $("#BrandEridDialog").dialog("open");
            });

            $("#BrandNameDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#BrandName").click(function () {
                $("#BrandNameDialog").dialog("open");
            });

            $("#CropIDDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#CropID").click(function () {
                $("#CropIDDialog").dialog("open");
            });

            $("#CropNameDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#CropName").click(function () {
                $("#CropNameDialog").dialog("open");
            });

            $("#URLDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#URL").click(function () {
                $("#URLDialog").dialog("open");
            });
            $("#DryYieldDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#DryYield").click(function () {
                $("#DryYieldDialog").dialog("open");
            });

            $("#WetYieldDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#WetYield").click(function () {
                $("#WetYieldDialog").dialog("open");
            });
            $("#MoistureDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Moisture").click(function () {
                $("#MoistureDialog").dialog("open");
            });
            $("#YawRateDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#YawRate").click(function () {
                $("#YawRateDialog").dialog("open");
            });
            $("#SpeedDialog").dialog({
                autoOpen: false,
                modal: true
            });
            $("#Speed").click(function () {
                $("#SpeedDialog").dialog("open");
            });
        });
               
        </script>
</div>
