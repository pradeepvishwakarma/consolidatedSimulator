//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataStimulator.Resource {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class HarvestResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HarvestResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataStimulator.Resource.HarvestResource", typeof(HarvestResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Actual Speed = TractorSpeed * AccelerationFactor.
        /// </summary>
        public static string AccelerationFactorDescription {
            get {
                return ResourceManager.GetString("AccelerationFactorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BrandErid of Crop.
        /// </summary>
        public static string BrandEridDescription {
            get {
                return ResourceManager.GetString("BrandEridDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BrandName specifies the brand of the seed for the Crop.
        /// </summary>
        public static string BrandNameDescription {
            get {
                return ResourceManager.GetString("BrandNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you enter n then the simulator will change the field name after every nth Session.
        /// </summary>
        public static string ChangeCFFDescription {
            get {
                return ResourceManager.GetString("ChangeCFFDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of Chunks to be sent in a Session.
        /// </summary>
        public static string ChunksPerSessionDescription {
            get {
                return ResourceManager.GetString("ChunksPerSessionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Client.
        /// </summary>
        public static string ClientDescription {
            get {
                return ResourceManager.GetString("ClientDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Color Value in Hex.
        /// </summary>
        public static string ColorDescription {
            get {
                return ResourceManager.GetString("ColorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used for Calculation of color(for the DashBoardItem) along with Color( specified in Color textbox).
        /// </summary>
        public static string ColorSpaceDescription {
            get {
                return ResourceManager.GetString("ColorSpaceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Crop.
        /// </summary>
        public static string CropDescription {
            get {
                return ResourceManager.GetString("CropDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CropId of the Crop.
        /// </summary>
        public static string CropIDDescription {
            get {
                return ResourceManager.GetString("CropIDDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Crop.
        /// </summary>
        public static string CropNameDescription {
            get {
                return ResourceManager.GetString("CropNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If Checked and if current value has reached Max then next value will cycle back to Min.
        /// </summary>
        public static string CycleDescription {
            get {
                return ResourceManager.GetString("CycleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DataID for which the specified color has to be set for the DashBoardItem..
        /// </summary>
        public static string DataIDDescription {
            get {
                return ResourceManager.GetString("DataIDDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rows of the implement which are deactivated.If more than 1 separate by commas. E.g. 1,2,3.
        /// </summary>
        public static string DeactivatedSourcesDescription {
            get {
                return ResourceManager.GetString("DeactivatedSourcesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dry Yield in mg/m².
        /// </summary>
        public static string DryYieldDescription {
            get {
                return ResourceManager.GetString("DryYieldDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked then plotting will happen. If unchecked then only tractor will move since implement is lifted up..
        /// </summary>
        public static string EnablePlottingDescription {
            get {
                return ResourceManager.GetString("EnablePlottingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of DataEpochs to be sent in a Chunk.
        /// </summary>
        public static string EpochsPerChunkDescription {
            get {
                return ResourceManager.GetString("EpochsPerChunkDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Farm.
        /// </summary>
        public static string FarmDescription {
            get {
                return ResourceManager.GetString("FarmDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Field..
        /// </summary>
        public static string FieldDescription {
            get {
                return ResourceManager.GetString("FieldDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Height of the Field in degrees (Latitude).
        /// </summary>
        public static string FieldHeightDescription {
            get {
                return ResourceManager.GetString("FieldHeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Width of the Field in degrees (Longitude).
        /// </summary>
        public static string FieldWidthDescription {
            get {
                return ResourceManager.GetString("FieldWidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you specify Frequency as 2 and Num of Epochs as 5 then the color for DashBoardItem will be set for every 5 epochs after leaving 2 epochs.  .
        /// </summary>
        public static string FrequencyDescription {
            get {
                return ResourceManager.GetString("FrequencyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum Value for a particular parameter.
        /// </summary>
        public static string MaximumDescription {
            get {
                return ResourceManager.GetString("MaximumDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimum Value for a particular parameter.
        /// </summary>
        public static string MinimumDescription {
            get {
                return ResourceManager.GetString("MinimumDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moisture in %.
        /// </summary>
        public static string MoistureDescription {
            get {
                return ResourceManager.GetString("MoistureDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of rows of the implement.
        /// </summary>
        public static string NoOfSourcesDescription {
            get {
                return ResourceManager.GetString("NoOfSourcesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you specify Frequency as 2 and Num of Epochs as 5 then the color for DashBoardItem will be set for every 5 epochs after leaving 2 epochs..
        /// </summary>
        public static string NumOfEpochsDescription {
            get {
                return ResourceManager.GetString("NumOfEpochsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Operator of the machine.
        /// </summary>
        public static string OperatorDescription {
            get {
                return ResourceManager.GetString("OperatorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to X Origin Coordinate of the field in degrees (Latitude).
        /// </summary>
        public static string OriginXDescription {
            get {
                return ResourceManager.GetString("OriginXDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Y Origin Coordinate of the field in degrees (Longitude).
        /// </summary>
        public static string OriginYDescription {
            get {
                return ResourceManager.GetString("OriginYDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If Checked then instead of beginning from the Min value, Simulator starts sending data beginning with a random value(which is between Min and Max)..
        /// </summary>
        public static string RandomizeDescription {
            get {
                return ResourceManager.GetString("RandomizeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified color will be set for the DashBoardItem for the DataID(specified in DataID) present within this RepDomainID..
        /// </summary>
        public static string RepDomainIDDescription {
            get {
                return ResourceManager.GetString("RepDomainIDDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of DataEpochs transmitted from simulator in a second.
        /// </summary>
        public static string ResponsesPerSecondDescription {
            get {
                return ResourceManager.GetString("ResponsesPerSecondDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you enter n then the simulator will not send SessionContext at the end of every nth Session.
        /// </summary>
        public static string SkipEndSessionDescription {
            get {
                return ResourceManager.GetString("SkipEndSessionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you enter n then any random number between 1 - n will be selected (suppose m). The mth Chunk for every Session will not be sent by Simulator.
        /// </summary>
        public static string SkipRandomChunksDescription {
            get {
                return ResourceManager.GetString("SkipRandomChunksDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you enter n then any random number between 1 - n will be selected (suppose m) for each Chunk. The mth Epoch for every Chunk will not be sent by Simulator.
        /// </summary>
        public static string SkipRandomEpochsDescription {
            get {
                return ResourceManager.GetString("SkipRandomEpochsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  If you enter n then every nth Session and its DataEpochs will not be sent by Simulator.
        /// </summary>
        public static string SkipSessionDescription {
            get {
                return ResourceManager.GetString("SkipSessionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you enter n then the simulator will not send SessionContext in the beginning of every nth Session.
        /// </summary>
        public static string SkipStartSessionDescription {
            get {
                return ResourceManager.GetString("SkipStartSessionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Speed in km/hr.
        /// </summary>
        public static string SpeedDescription {
            get {
                return ResourceManager.GetString("SpeedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is the step value added to current value to generate next value.
        /// </summary>
        public static string StepDescription {
            get {
                return ResourceManager.GetString("StepDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To use this simulator replace your WDSUri with the specified URL.
        /// </summary>
        public static string URLDescription {
            get {
                return ResourceManager.GetString("URLDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wet Yield in mg/m².
        /// </summary>
        public static string WetYieldDescription {
            get {
                return ResourceManager.GetString("WetYieldDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to YawRate in N.
        /// </summary>
        public static string YawRateDescription {
            get {
                return ResourceManager.GetString("YawRateDescription", resourceCulture);
            }
        }
    }
}
