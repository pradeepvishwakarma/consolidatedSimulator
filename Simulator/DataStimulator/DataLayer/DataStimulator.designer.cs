#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataStimulator.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HarvestTest4DB")]
	public partial class DataStimulatorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkingData(WorkingData instance);
    partial void UpdateWorkingData(WorkingData instance);
    partial void DeleteWorkingData(WorkingData instance);
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertCrop(Crop instance);
    partial void UpdateCrop(Crop instance);
    partial void DeleteCrop(Crop instance);
    partial void InsertCurve(Curve instance);
    partial void UpdateCurve(Curve instance);
    partial void DeleteCurve(Curve instance);
    partial void InsertDataCollection(DataCollection instance);
    partial void UpdateDataCollection(DataCollection instance);
    partial void DeleteDataCollection(DataCollection instance);
    partial void InsertDataGenerator(DataGenerator instance);
    partial void UpdateDataGenerator(DataGenerator instance);
    partial void DeleteDataGenerator(DataGenerator instance);
    partial void InsertDataPattern(DataPattern instance);
    partial void UpdateDataPattern(DataPattern instance);
    partial void DeleteDataPattern(DataPattern instance);
    partial void InsertDataPoint(DataPoint instance);
    partial void UpdateDataPoint(DataPoint instance);
    partial void DeleteDataPoint(DataPoint instance);
    partial void InsertDataUX(DataUX instance);
    partial void UpdateDataUX(DataUX instance);
    partial void DeleteDataUX(DataUX instance);
    partial void InsertDeviceState(DeviceState instance);
    partial void UpdateDeviceState(DeviceState instance);
    partial void DeleteDeviceState(DeviceState instance);
    partial void InsertDirectionMaster(DirectionMaster instance);
    partial void UpdateDirectionMaster(DirectionMaster instance);
    partial void DeleteDirectionMaster(DirectionMaster instance);
    partial void InsertFieldMaster(FieldMaster instance);
    partial void UpdateFieldMaster(FieldMaster instance);
    partial void DeleteFieldMaster(FieldMaster instance);
    partial void InsertOrganizationMaster(OrganizationMaster instance);
    partial void UpdateOrganizationMaster(OrganizationMaster instance);
    partial void DeleteOrganizationMaster(OrganizationMaster instance);
    partial void InsertRandomData(RandomData instance);
    partial void UpdateRandomData(RandomData instance);
    partial void DeleteRandomData(RandomData instance);
    partial void InsertSectionControl(SectionControl instance);
    partial void UpdateSectionControl(SectionControl instance);
    partial void DeleteSectionControl(SectionControl instance);
    partial void InsertSessionMaster(SessionMaster instance);
    partial void UpdateSessionMaster(SessionMaster instance);
    partial void DeleteSessionMaster(SessionMaster instance);
    partial void InsertSimulationParameter(SimulationParameter instance);
    partial void UpdateSimulationParameter(SimulationParameter instance);
    partial void DeleteSimulationParameter(SimulationParameter instance);
    partial void InsertTypeMaster(TypeMaster instance);
    partial void UpdateTypeMaster(TypeMaster instance);
    partial void DeleteTypeMaster(TypeMaster instance);
    partial void InsertUserDetail(UserDetail instance);
    partial void UpdateUserDetail(UserDetail instance);
    partial void DeleteUserDetail(UserDetail instance);
    partial void InsertVariety(Variety instance);
    partial void UpdateVariety(Variety instance);
    partial void DeleteVariety(Variety instance);
    #endregion
		
		public DataStimulatorDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HarvestTest4DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataStimulatorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStimulatorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStimulatorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStimulatorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkingData> WorkingDatas
		{
			get
			{
				return this.GetTable<WorkingData>();
			}
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<Crop> Crops
		{
			get
			{
				return this.GetTable<Crop>();
			}
		}
		
		public System.Data.Linq.Table<Curve> Curves
		{
			get
			{
				return this.GetTable<Curve>();
			}
		}
		
		public System.Data.Linq.Table<DataCollection> DataCollections
		{
			get
			{
				return this.GetTable<DataCollection>();
			}
		}
		
		public System.Data.Linq.Table<DataGenerator> DataGenerators
		{
			get
			{
				return this.GetTable<DataGenerator>();
			}
		}
		
		public System.Data.Linq.Table<DataPattern> DataPatterns
		{
			get
			{
				return this.GetTable<DataPattern>();
			}
		}
		
		public System.Data.Linq.Table<DataPoint> DataPoints
		{
			get
			{
				return this.GetTable<DataPoint>();
			}
		}
		
		public System.Data.Linq.Table<DataUX> DataUXes
		{
			get
			{
				return this.GetTable<DataUX>();
			}
		}
		
		public System.Data.Linq.Table<DeviceState> DeviceStates
		{
			get
			{
				return this.GetTable<DeviceState>();
			}
		}
		
		public System.Data.Linq.Table<DirectionMaster> DirectionMasters
		{
			get
			{
				return this.GetTable<DirectionMaster>();
			}
		}
		
		public System.Data.Linq.Table<FieldMaster> FieldMasters
		{
			get
			{
				return this.GetTable<FieldMaster>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationMaster> OrganizationMasters
		{
			get
			{
				return this.GetTable<OrganizationMaster>();
			}
		}
		
		public System.Data.Linq.Table<RandomData> RandomDatas
		{
			get
			{
				return this.GetTable<RandomData>();
			}
		}
		
		public System.Data.Linq.Table<SectionControl> SectionControls
		{
			get
			{
				return this.GetTable<SectionControl>();
			}
		}
		
		public System.Data.Linq.Table<SessionMaster> SessionMasters
		{
			get
			{
				return this.GetTable<SessionMaster>();
			}
		}
		
		public System.Data.Linq.Table<SimulationParameter> SimulationParameters
		{
			get
			{
				return this.GetTable<SimulationParameter>();
			}
		}
		
		public System.Data.Linq.Table<TypeMaster> TypeMasters
		{
			get
			{
				return this.GetTable<TypeMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserDetail> UserDetails
		{
			get
			{
				return this.GetTable<UserDetail>();
			}
		}
		
		public System.Data.Linq.Table<Variety> Varieties
		{
			get
			{
				return this.GetTable<Variety>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingData")]
	public partial class WorkingData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DataID;
		
		private string _TypeName;
		
		private string _Offset;
		
		private string _ScaleFactor;
		
		private string _UOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDataIDChanging(System.Nullable<int> value);
    partial void OnDataIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnOffsetChanging(string value);
    partial void OnOffsetChanged();
    partial void OnScaleFactorChanging(string value);
    partial void OnScaleFactorChanged();
    partial void OnUOMChanging(string value);
    partial void OnUOMChanged();
    #endregion
		
		public WorkingData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataID", DbType="Int")]
		public System.Nullable<int> DataID
		{
			get
			{
				return this._DataID;
			}
			set
			{
				if ((this._DataID != value))
				{
					this.OnDataIDChanging(value);
					this.SendPropertyChanging();
					this._DataID = value;
					this.SendPropertyChanged("DataID");
					this.OnDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offset", DbType="NVarChar(50)")]
		public string Offset
		{
			get
			{
				return this._Offset;
			}
			set
			{
				if ((this._Offset != value))
				{
					this.OnOffsetChanging(value);
					this.SendPropertyChanging();
					this._Offset = value;
					this.SendPropertyChanged("Offset");
					this.OnOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleFactor", DbType="NVarChar(50)")]
		public string ScaleFactor
		{
			get
			{
				return this._ScaleFactor;
			}
			set
			{
				if ((this._ScaleFactor != value))
				{
					this.OnScaleFactorChanging(value);
					this.SendPropertyChanging();
					this._ScaleFactor = value;
					this.SendPropertyChanged("ScaleFactor");
					this.OnScaleFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UOM", DbType="NVarChar(50)")]
		public string UOM
		{
			get
			{
				return this._UOM;
			}
			set
			{
				if ((this._UOM != value))
				{
					this.OnUOMChanging(value);
					this.SendPropertyChanging();
					this._UOM = value;
					this.SendPropertyChanged("UOM");
					this.OnUOMChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _BrandErid;
		
		private string _BrandName;
		
		private System.Nullable<int> _TypeID;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBrandEridChanging(string value);
    partial void OnBrandEridChanged();
    partial void OnBrandNameChanging(string value);
    partial void OnBrandNameChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    #endregion
		
		public Brand()
		{
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandErid", DbType="NVarChar(50)")]
		public string BrandErid
		{
			get
			{
				return this._BrandErid;
			}
			set
			{
				if ((this._BrandErid != value))
				{
					this.OnBrandEridChanging(value);
					this.SendPropertyChanging();
					this._BrandErid = value;
					this.SendPropertyChanged("BrandErid");
					this.OnBrandEridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandName", DbType="NVarChar(50)")]
		public string BrandName
		{
			get
			{
				return this._BrandName;
			}
			set
			{
				if ((this._BrandName != value))
				{
					this.OnBrandNameChanging(value);
					this.SendPropertyChanging();
					this._BrandName = value;
					this.SendPropertyChanged("BrandName");
					this.OnBrandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Brand", Storage="_TypeMaster", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.Brands.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.Brands.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Crop")]
	public partial class Crop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _EICCropID;
		
		private string _CropName;
		
		private System.Nullable<int> _TypeID;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEICCropIDChanging(System.Nullable<int> value);
    partial void OnEICCropIDChanged();
    partial void OnCropNameChanging(string value);
    partial void OnCropNameChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    #endregion
		
		public Crop()
		{
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EICCropID", DbType="Int")]
		public System.Nullable<int> EICCropID
		{
			get
			{
				return this._EICCropID;
			}
			set
			{
				if ((this._EICCropID != value))
				{
					this.OnEICCropIDChanging(value);
					this.SendPropertyChanging();
					this._EICCropID = value;
					this.SendPropertyChanged("EICCropID");
					this.OnEICCropIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CropName", DbType="NVarChar(50)")]
		public string CropName
		{
			get
			{
				return this._CropName;
			}
			set
			{
				if ((this._CropName != value))
				{
					this.OnCropNameChanging(value);
					this.SendPropertyChanging();
					this._CropName = value;
					this.SendPropertyChanged("CropName");
					this.OnCropNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Crop", Storage="_TypeMaster", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.Crops.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.Crops.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Curve")]
	public partial class Curve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _OnMaximum;
		
		private System.Nullable<int> _OnMinimum;
		
		private System.Nullable<int> _Type;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOnMaximumChanging(System.Nullable<int> value);
    partial void OnOnMaximumChanged();
    partial void OnOnMinimumChanging(System.Nullable<int> value);
    partial void OnOnMinimumChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public Curve()
		{
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnMaximum", DbType="Int")]
		public System.Nullable<int> OnMaximum
		{
			get
			{
				return this._OnMaximum;
			}
			set
			{
				if ((this._OnMaximum != value))
				{
					this.OnOnMaximumChanging(value);
					this.SendPropertyChanging();
					this._OnMaximum = value;
					this.SendPropertyChanged("OnMaximum");
					this.OnOnMaximumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnMinimum", DbType="Int")]
		public System.Nullable<int> OnMinimum
		{
			get
			{
				return this._OnMinimum;
			}
			set
			{
				if ((this._OnMinimum != value))
				{
					this.OnOnMinimumChanging(value);
					this.SendPropertyChanging();
					this._OnMinimum = value;
					this.SendPropertyChanged("OnMinimum");
					this.OnOnMinimumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Curve", Storage="_TypeMaster", ThisKey="Type", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.Curves.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.Curves.Add(this);
						this._Type = value.TypeID;
					}
					else
					{
						this._Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataCollection")]
	public partial class DataCollection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SessionGuid;
		
		private int _ChunkSeqNo;
		
		private int _DataEpochId;
		
		private System.Data.Linq.Binary _DataEpoch;
		
		private EntityRef<SessionMaster> _SessionMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSessionGuidChanging(int value);
    partial void OnSessionGuidChanged();
    partial void OnChunkSeqNoChanging(int value);
    partial void OnChunkSeqNoChanged();
    partial void OnDataEpochIdChanging(int value);
    partial void OnDataEpochIdChanged();
    partial void OnDataEpochChanging(System.Data.Linq.Binary value);
    partial void OnDataEpochChanged();
    #endregion
		
		public DataCollection()
		{
			this._SessionMaster = default(EntityRef<SessionMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionGuid", DbType="Int NOT NULL")]
		public int SessionGuid
		{
			get
			{
				return this._SessionGuid;
			}
			set
			{
				if ((this._SessionGuid != value))
				{
					if (this._SessionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionGuidChanging(value);
					this.SendPropertyChanging();
					this._SessionGuid = value;
					this.SendPropertyChanged("SessionGuid");
					this.OnSessionGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChunkSeqNo", DbType="Int NOT NULL")]
		public int ChunkSeqNo
		{
			get
			{
				return this._ChunkSeqNo;
			}
			set
			{
				if ((this._ChunkSeqNo != value))
				{
					this.OnChunkSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ChunkSeqNo = value;
					this.SendPropertyChanged("ChunkSeqNo");
					this.OnChunkSeqNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataEpochId", DbType="Int NOT NULL")]
		public int DataEpochId
		{
			get
			{
				return this._DataEpochId;
			}
			set
			{
				if ((this._DataEpochId != value))
				{
					this.OnDataEpochIdChanging(value);
					this.SendPropertyChanging();
					this._DataEpochId = value;
					this.SendPropertyChanged("DataEpochId");
					this.OnDataEpochIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataEpoch", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DataEpoch
		{
			get
			{
				return this._DataEpoch;
			}
			set
			{
				if ((this._DataEpoch != value))
				{
					this.OnDataEpochChanging(value);
					this.SendPropertyChanging();
					this._DataEpoch = value;
					this.SendPropertyChanged("DataEpoch");
					this.OnDataEpochChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionMaster_DataCollection", Storage="_SessionMaster", ThisKey="SessionGuid", OtherKey="Id", IsForeignKey=true)]
		public SessionMaster SessionMaster
		{
			get
			{
				return this._SessionMaster.Entity;
			}
			set
			{
				SessionMaster previousValue = this._SessionMaster.Entity;
				if (((previousValue != value) 
							|| (this._SessionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionMaster.Entity = null;
						previousValue.DataCollections.Remove(this);
					}
					this._SessionMaster.Entity = value;
					if ((value != null))
					{
						value.DataCollections.Add(this);
						this._SessionGuid = value.Id;
					}
					else
					{
						this._SessionGuid = default(int);
					}
					this.SendPropertyChanged("SessionMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataGenerator")]
	public partial class DataGenerator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FieldID;
		
		private System.Nullable<int> _DataPoint;
		
		private System.Nullable<int> _DataPattern;
		
		private int _Type;
		
		private EntityRef<DataPattern> _DataPattern1;
		
		private EntityRef<DataPoint> _DataPoint1;
		
		private EntityRef<FieldMaster> _FieldMaster;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnDataPointChanging(System.Nullable<int> value);
    partial void OnDataPointChanged();
    partial void OnDataPatternChanging(System.Nullable<int> value);
    partial void OnDataPatternChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public DataGenerator()
		{
			this._DataPattern1 = default(EntityRef<DataPattern>);
			this._DataPoint1 = default(EntityRef<DataPoint>);
			this._FieldMaster = default(EntityRef<FieldMaster>);
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="Int NOT NULL")]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._FieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataPoint", DbType="Int")]
		public System.Nullable<int> DataPoint
		{
			get
			{
				return this._DataPoint;
			}
			set
			{
				if ((this._DataPoint != value))
				{
					if (this._DataPoint1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataPointChanging(value);
					this.SendPropertyChanging();
					this._DataPoint = value;
					this.SendPropertyChanged("DataPoint");
					this.OnDataPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataPattern", DbType="Int")]
		public System.Nullable<int> DataPattern
		{
			get
			{
				return this._DataPattern;
			}
			set
			{
				if ((this._DataPattern != value))
				{
					if (this._DataPattern1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataPatternChanging(value);
					this.SendPropertyChanging();
					this._DataPattern = value;
					this.SendPropertyChanged("DataPattern");
					this.OnDataPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataPattern_DataGenerator", Storage="_DataPattern1", ThisKey="DataPattern", OtherKey="ID", IsForeignKey=true)]
		public DataPattern DataPattern1
		{
			get
			{
				return this._DataPattern1.Entity;
			}
			set
			{
				DataPattern previousValue = this._DataPattern1.Entity;
				if (((previousValue != value) 
							|| (this._DataPattern1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataPattern1.Entity = null;
						previousValue.DataGenerators.Remove(this);
					}
					this._DataPattern1.Entity = value;
					if ((value != null))
					{
						value.DataGenerators.Add(this);
						this._DataPattern = value.ID;
					}
					else
					{
						this._DataPattern = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataPattern1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataPoint_DataGenerator", Storage="_DataPoint1", ThisKey="DataPoint", OtherKey="ID", IsForeignKey=true)]
		public DataPoint DataPoint1
		{
			get
			{
				return this._DataPoint1.Entity;
			}
			set
			{
				DataPoint previousValue = this._DataPoint1.Entity;
				if (((previousValue != value) 
							|| (this._DataPoint1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataPoint1.Entity = null;
						previousValue.DataGenerators.Remove(this);
					}
					this._DataPoint1.Entity = value;
					if ((value != null))
					{
						value.DataGenerators.Add(this);
						this._DataPoint = value.ID;
					}
					else
					{
						this._DataPoint = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataPoint1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldMaster_DataGenerator", Storage="_FieldMaster", ThisKey="FieldID", OtherKey="FieldID", IsForeignKey=true)]
		public FieldMaster FieldMaster
		{
			get
			{
				return this._FieldMaster.Entity;
			}
			set
			{
				FieldMaster previousValue = this._FieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._FieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldMaster.Entity = null;
						previousValue.DataGenerators.Remove(this);
					}
					this._FieldMaster.Entity = value;
					if ((value != null))
					{
						value.DataGenerators.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(int);
					}
					this.SendPropertyChanged("FieldMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_DataGenerator", Storage="_TypeMaster", ThisKey="Type", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.DataGenerators.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.DataGenerators.Add(this);
						this._Type = value.TypeID;
					}
					else
					{
						this._Type = default(int);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataPattern")]
	public partial class DataPattern : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DisplayIndexID;
		
		private string _Minimum;
		
		private string _Maximum;
		
		private string _Step;
		
		private bool _Cycle;
		
		private bool _Randomize;
		
		private string _EventValue;
		
		private string _DefaultValue;
		
		private string _EventPropability;
		
		private EntitySet<DataGenerator> _DataGenerators;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDisplayIndexIDChanging(System.Nullable<int> value);
    partial void OnDisplayIndexIDChanged();
    partial void OnMinimumChanging(string value);
    partial void OnMinimumChanged();
    partial void OnMaximumChanging(string value);
    partial void OnMaximumChanged();
    partial void OnStepChanging(string value);
    partial void OnStepChanged();
    partial void OnCycleChanging(bool value);
    partial void OnCycleChanged();
    partial void OnRandomizeChanging(bool value);
    partial void OnRandomizeChanged();
    partial void OnEventValueChanging(string value);
    partial void OnEventValueChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnEventPropabilityChanging(string value);
    partial void OnEventPropabilityChanged();
    #endregion
		
		public DataPattern()
		{
			this._DataGenerators = new EntitySet<DataGenerator>(new Action<DataGenerator>(this.attach_DataGenerators), new Action<DataGenerator>(this.detach_DataGenerators));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayIndexID", DbType="Int")]
		public System.Nullable<int> DisplayIndexID
		{
			get
			{
				return this._DisplayIndexID;
			}
			set
			{
				if ((this._DisplayIndexID != value))
				{
					this.OnDisplayIndexIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayIndexID = value;
					this.SendPropertyChanged("DisplayIndexID");
					this.OnDisplayIndexIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Minimum", DbType="NVarChar(50)")]
		public string Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				if ((this._Minimum != value))
				{
					this.OnMinimumChanging(value);
					this.SendPropertyChanging();
					this._Minimum = value;
					this.SendPropertyChanged("Minimum");
					this.OnMinimumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maximum", DbType="NVarChar(50)")]
		public string Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				if ((this._Maximum != value))
				{
					this.OnMaximumChanging(value);
					this.SendPropertyChanging();
					this._Maximum = value;
					this.SendPropertyChanged("Maximum");
					this.OnMaximumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Step", DbType="NVarChar(50)")]
		public string Step
		{
			get
			{
				return this._Step;
			}
			set
			{
				if ((this._Step != value))
				{
					this.OnStepChanging(value);
					this.SendPropertyChanging();
					this._Step = value;
					this.SendPropertyChanged("Step");
					this.OnStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cycle", DbType="Bit NOT NULL")]
		public bool Cycle
		{
			get
			{
				return this._Cycle;
			}
			set
			{
				if ((this._Cycle != value))
				{
					this.OnCycleChanging(value);
					this.SendPropertyChanging();
					this._Cycle = value;
					this.SendPropertyChanged("Cycle");
					this.OnCycleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Randomize", DbType="Bit NOT NULL")]
		public bool Randomize
		{
			get
			{
				return this._Randomize;
			}
			set
			{
				if ((this._Randomize != value))
				{
					this.OnRandomizeChanging(value);
					this.SendPropertyChanging();
					this._Randomize = value;
					this.SendPropertyChanged("Randomize");
					this.OnRandomizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventValue", DbType="NVarChar(50)")]
		public string EventValue
		{
			get
			{
				return this._EventValue;
			}
			set
			{
				if ((this._EventValue != value))
				{
					this.OnEventValueChanging(value);
					this.SendPropertyChanging();
					this._EventValue = value;
					this.SendPropertyChanged("EventValue");
					this.OnEventValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="NVarChar(50)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventPropability", DbType="NVarChar(50)")]
		public string EventPropability
		{
			get
			{
				return this._EventPropability;
			}
			set
			{
				if ((this._EventPropability != value))
				{
					this.OnEventPropabilityChanging(value);
					this.SendPropertyChanging();
					this._EventPropability = value;
					this.SendPropertyChanged("EventPropability");
					this.OnEventPropabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataPattern_DataGenerator", Storage="_DataGenerators", ThisKey="ID", OtherKey="DataPattern")]
		public EntitySet<DataGenerator> DataGenerators
		{
			get
			{
				return this._DataGenerators;
			}
			set
			{
				this._DataGenerators.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.DataPattern1 = this;
		}
		
		private void detach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.DataPattern1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataPoint")]
	public partial class DataPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Current;
		
		private string _Target;
		
		private bool _Adjusting;
		
		private EntitySet<DataGenerator> _DataGenerators;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCurrentChanging(string value);
    partial void OnCurrentChanged();
    partial void OnTargetChanging(string value);
    partial void OnTargetChanged();
    partial void OnAdjustingChanging(bool value);
    partial void OnAdjustingChanged();
    #endregion
		
		public DataPoint()
		{
			this._DataGenerators = new EntitySet<DataGenerator>(new Action<DataGenerator>(this.attach_DataGenerators), new Action<DataGenerator>(this.detach_DataGenerators));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Current]", Storage="_Current", DbType="NVarChar(50)")]
		public string Current
		{
			get
			{
				return this._Current;
			}
			set
			{
				if ((this._Current != value))
				{
					this.OnCurrentChanging(value);
					this.SendPropertyChanging();
					this._Current = value;
					this.SendPropertyChanged("Current");
					this.OnCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Target", DbType="NVarChar(50)")]
		public string Target
		{
			get
			{
				return this._Target;
			}
			set
			{
				if ((this._Target != value))
				{
					this.OnTargetChanging(value);
					this.SendPropertyChanging();
					this._Target = value;
					this.SendPropertyChanged("Target");
					this.OnTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adjusting", DbType="Bit NOT NULL")]
		public bool Adjusting
		{
			get
			{
				return this._Adjusting;
			}
			set
			{
				if ((this._Adjusting != value))
				{
					this.OnAdjustingChanging(value);
					this.SendPropertyChanging();
					this._Adjusting = value;
					this.SendPropertyChanged("Adjusting");
					this.OnAdjustingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataPoint_DataGenerator", Storage="_DataGenerators", ThisKey="ID", OtherKey="DataPoint")]
		public EntitySet<DataGenerator> DataGenerators
		{
			get
			{
				return this._DataGenerators;
			}
			set
			{
				this._DataGenerators.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.DataPoint1 = this;
		}
		
		private void detach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.DataPoint1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataUX")]
	public partial class DataUX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DataId;
		
		private System.Nullable<int> _RepDomainId;
		
		private string _Color;
		
		private System.Nullable<int> _ColorSpace;
		
		private System.Nullable<int> _Frequency;
		
		private System.Nullable<int> _NoOfEpochs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDataIdChanging(System.Nullable<int> value);
    partial void OnDataIdChanged();
    partial void OnRepDomainIdChanging(System.Nullable<int> value);
    partial void OnRepDomainIdChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnColorSpaceChanging(System.Nullable<int> value);
    partial void OnColorSpaceChanged();
    partial void OnFrequencyChanging(System.Nullable<int> value);
    partial void OnFrequencyChanged();
    partial void OnNoOfEpochsChanging(System.Nullable<int> value);
    partial void OnNoOfEpochsChanged();
    #endregion
		
		public DataUX()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataId", DbType="Int")]
		public System.Nullable<int> DataId
		{
			get
			{
				return this._DataId;
			}
			set
			{
				if ((this._DataId != value))
				{
					this.OnDataIdChanging(value);
					this.SendPropertyChanging();
					this._DataId = value;
					this.SendPropertyChanged("DataId");
					this.OnDataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepDomainId", DbType="Int")]
		public System.Nullable<int> RepDomainId
		{
			get
			{
				return this._RepDomainId;
			}
			set
			{
				if ((this._RepDomainId != value))
				{
					this.OnRepDomainIdChanging(value);
					this.SendPropertyChanging();
					this._RepDomainId = value;
					this.SendPropertyChanged("RepDomainId");
					this.OnRepDomainIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(10)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorSpace", DbType="Int")]
		public System.Nullable<int> ColorSpace
		{
			get
			{
				return this._ColorSpace;
			}
			set
			{
				if ((this._ColorSpace != value))
				{
					this.OnColorSpaceChanging(value);
					this.SendPropertyChanging();
					this._ColorSpace = value;
					this.SendPropertyChanged("ColorSpace");
					this.OnColorSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int")]
		public System.Nullable<int> Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfEpochs", DbType="Int")]
		public System.Nullable<int> NoOfEpochs
		{
			get
			{
				return this._NoOfEpochs;
			}
			set
			{
				if ((this._NoOfEpochs != value))
				{
					this.OnNoOfEpochsChanging(value);
					this.SendPropertyChanging();
					this._NoOfEpochs = value;
					this.SendPropertyChanged("NoOfEpochs");
					this.OnNoOfEpochsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceState")]
	public partial class DeviceState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DeviceID;
		
		private bool _Start;
		
		private string _Value;
		
		private int _TypeID;
		
		private string _sessionID;
		
		private string _SourceValue;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDeviceIDChanging(string value);
    partial void OnDeviceIDChanged();
    partial void OnStartChanging(bool value);
    partial void OnStartChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnsessionIDChanging(string value);
    partial void OnsessionIDChanged();
    partial void OnSourceValueChanging(string value);
    partial void OnSourceValueChanged();
    #endregion
		
		public DeviceState()
		{
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="Bit NOT NULL")]
		public bool Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionID", DbType="NVarChar(100)")]
		public string sessionID
		{
			get
			{
				return this._sessionID;
			}
			set
			{
				if ((this._sessionID != value))
				{
					this.OnsessionIDChanging(value);
					this.SendPropertyChanging();
					this._sessionID = value;
					this.SendPropertyChanged("sessionID");
					this.OnsessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceValue", DbType="NVarChar(MAX)")]
		public string SourceValue
		{
			get
			{
				return this._SourceValue;
			}
			set
			{
				if ((this._SourceValue != value))
				{
					this.OnSourceValueChanging(value);
					this.SendPropertyChanging();
					this._SourceValue = value;
					this.SendPropertyChanged("SourceValue");
					this.OnSourceValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_DeviceState", Storage="_TypeMaster", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.DeviceStates.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.DeviceStates.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DirectionMaster")]
	public partial class DirectionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Direction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    #endregion
		
		public DirectionMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="NVarChar(500)")]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldMaster")]
	public partial class FieldMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldID;
		
		private string _FieldName;
		
		private int _TypeID;
		
		private EntitySet<DataGenerator> _DataGenerators;
		
		private EntitySet<RandomData> _RandomDatas;
		
		private EntitySet<SimulationParameter> _SimulationParameters;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    #endregion
		
		public FieldMaster()
		{
			this._DataGenerators = new EntitySet<DataGenerator>(new Action<DataGenerator>(this.attach_DataGenerators), new Action<DataGenerator>(this.detach_DataGenerators));
			this._RandomDatas = new EntitySet<RandomData>(new Action<RandomData>(this.attach_RandomDatas), new Action<RandomData>(this.detach_RandomDatas));
			this._SimulationParameters = new EntitySet<SimulationParameter>(new Action<SimulationParameter>(this.attach_SimulationParameters), new Action<SimulationParameter>(this.detach_SimulationParameters));
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="VarChar(50)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldMaster_DataGenerator", Storage="_DataGenerators", ThisKey="FieldID", OtherKey="FieldID")]
		public EntitySet<DataGenerator> DataGenerators
		{
			get
			{
				return this._DataGenerators;
			}
			set
			{
				this._DataGenerators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldMaster_RandomData", Storage="_RandomDatas", ThisKey="FieldID", OtherKey="FieldID")]
		public EntitySet<RandomData> RandomDatas
		{
			get
			{
				return this._RandomDatas;
			}
			set
			{
				this._RandomDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldMaster_SimulationParameter", Storage="_SimulationParameters", ThisKey="FieldID", OtherKey="FieldID")]
		public EntitySet<SimulationParameter> SimulationParameters
		{
			get
			{
				return this._SimulationParameters;
			}
			set
			{
				this._SimulationParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_FieldMaster", Storage="_TypeMaster", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.FieldMasters.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.FieldMasters.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.FieldMaster = this;
		}
		
		private void detach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.FieldMaster = null;
		}
		
		private void attach_RandomDatas(RandomData entity)
		{
			this.SendPropertyChanging();
			entity.FieldMaster = this;
		}
		
		private void detach_RandomDatas(RandomData entity)
		{
			this.SendPropertyChanging();
			entity.FieldMaster = null;
		}
		
		private void attach_SimulationParameters(SimulationParameter entity)
		{
			this.SendPropertyChanging();
			entity.FieldMaster = this;
		}
		
		private void detach_SimulationParameters(SimulationParameter entity)
		{
			this.SendPropertyChanging();
			entity.FieldMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationMaster")]
	public partial class OrganizationMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrganizationID;
		
		private string _OrganizationName;
		
		private EntitySet<UserDetail> _UserDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnOrganizationNameChanging(string value);
    partial void OnOrganizationNameChanged();
    #endregion
		
		public OrganizationMaster()
		{
			this._UserDetails = new EntitySet<UserDetail>(new Action<UserDetail>(this.attach_UserDetails), new Action<UserDetail>(this.detach_UserDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string OrganizationName
		{
			get
			{
				return this._OrganizationName;
			}
			set
			{
				if ((this._OrganizationName != value))
				{
					this.OnOrganizationNameChanging(value);
					this.SendPropertyChanging();
					this._OrganizationName = value;
					this.SendPropertyChanged("OrganizationName");
					this.OnOrganizationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationMaster_UserDetail", Storage="_UserDetails", ThisKey="OrganizationID", OtherKey="OrganizationID")]
		public EntitySet<UserDetail> UserDetails
		{
			get
			{
				return this._UserDetails;
			}
			set
			{
				this._UserDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationMaster = this;
		}
		
		private void detach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RandomData")]
	public partial class RandomData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FieldID;
		
		private string _Value;
		
		private int _TypeID;
		
		private EntityRef<FieldMaster> _FieldMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    #endregion
		
		public RandomData()
		{
			this._FieldMaster = default(EntityRef<FieldMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="Int NOT NULL")]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._FieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(500)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldMaster_RandomData", Storage="_FieldMaster", ThisKey="FieldID", OtherKey="FieldID", IsForeignKey=true)]
		public FieldMaster FieldMaster
		{
			get
			{
				return this._FieldMaster.Entity;
			}
			set
			{
				FieldMaster previousValue = this._FieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._FieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldMaster.Entity = null;
						previousValue.RandomDatas.Remove(this);
					}
					this._FieldMaster.Entity = value;
					if ((value != null))
					{
						value.RandomDatas.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(int);
					}
					this.SendPropertyChanged("FieldMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SectionControl")]
	public partial class SectionControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionID;
		
		private double _Width;
		
		private string _IsEnabled;
		
		private System.Nullable<double> _LateralOffset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIDChanging(int value);
    partial void OnSectionIDChanged();
    partial void OnWidthChanging(double value);
    partial void OnWidthChanged();
    partial void OnIsEnabledChanging(string value);
    partial void OnIsEnabledChanged();
    partial void OnLateralOffsetChanging(System.Nullable<double> value);
    partial void OnLateralOffsetChanged();
    #endregion
		
		public SectionControl()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Float NOT NULL")]
		public double Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LateralOffset", DbType="Float")]
		public System.Nullable<double> LateralOffset
		{
			get
			{
				return this._LateralOffset;
			}
			set
			{
				if ((this._LateralOffset != value))
				{
					this.OnLateralOffsetChanging(value);
					this.SendPropertyChanging();
					this._LateralOffset = value;
					this.SendPropertyChanged("LateralOffset");
					this.OnLateralOffsetChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionMaster")]
	public partial class SessionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SessionGuid;
		
		private System.Data.Linq.Binary _SessionContext;
		
		private bool _EndSession;
		
		private string _SocketSessionGuid;
		
		private EntitySet<DataCollection> _DataCollections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSessionGuidChanging(string value);
    partial void OnSessionGuidChanged();
    partial void OnSessionContextChanging(System.Data.Linq.Binary value);
    partial void OnSessionContextChanged();
    partial void OnEndSessionChanging(bool value);
    partial void OnEndSessionChanged();
    partial void OnSocketSessionGuidChanging(string value);
    partial void OnSocketSessionGuidChanged();
    #endregion
		
		public SessionMaster()
		{
			this._DataCollections = new EntitySet<DataCollection>(new Action<DataCollection>(this.attach_DataCollections), new Action<DataCollection>(this.detach_DataCollections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionGuid", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SessionGuid
		{
			get
			{
				return this._SessionGuid;
			}
			set
			{
				if ((this._SessionGuid != value))
				{
					this.OnSessionGuidChanging(value);
					this.SendPropertyChanging();
					this._SessionGuid = value;
					this.SendPropertyChanged("SessionGuid");
					this.OnSessionGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionContext", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SessionContext
		{
			get
			{
				return this._SessionContext;
			}
			set
			{
				if ((this._SessionContext != value))
				{
					this.OnSessionContextChanging(value);
					this.SendPropertyChanging();
					this._SessionContext = value;
					this.SendPropertyChanged("SessionContext");
					this.OnSessionContextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndSession", DbType="Bit NOT NULL")]
		public bool EndSession
		{
			get
			{
				return this._EndSession;
			}
			set
			{
				if ((this._EndSession != value))
				{
					this.OnEndSessionChanging(value);
					this.SendPropertyChanging();
					this._EndSession = value;
					this.SendPropertyChanged("EndSession");
					this.OnEndSessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocketSessionGuid", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SocketSessionGuid
		{
			get
			{
				return this._SocketSessionGuid;
			}
			set
			{
				if ((this._SocketSessionGuid != value))
				{
					this.OnSocketSessionGuidChanging(value);
					this.SendPropertyChanging();
					this._SocketSessionGuid = value;
					this.SendPropertyChanged("SocketSessionGuid");
					this.OnSocketSessionGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionMaster_DataCollection", Storage="_DataCollections", ThisKey="Id", OtherKey="SessionGuid")]
		public EntitySet<DataCollection> DataCollections
		{
			get
			{
				return this._DataCollections;
			}
			set
			{
				this._DataCollections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataCollections(DataCollection entity)
		{
			this.SendPropertyChanging();
			entity.SessionMaster = this;
		}
		
		private void detach_DataCollections(DataCollection entity)
		{
			this.SendPropertyChanging();
			entity.SessionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SimulationParameter")]
	public partial class SimulationParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FieldID;
		
		private string _FieldValue;
		
		private System.Nullable<int> _TypeID;
		
		private EntityRef<FieldMaster> _FieldMaster;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFieldIDChanging(System.Nullable<int> value);
    partial void OnFieldIDChanged();
    partial void OnFieldValueChanging(string value);
    partial void OnFieldValueChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    #endregion
		
		public SimulationParameter()
		{
			this._FieldMaster = default(EntityRef<FieldMaster>);
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="Int")]
		public System.Nullable<int> FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._FieldMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldValue", DbType="NVarChar(50)")]
		public string FieldValue
		{
			get
			{
				return this._FieldValue;
			}
			set
			{
				if ((this._FieldValue != value))
				{
					this.OnFieldValueChanging(value);
					this.SendPropertyChanging();
					this._FieldValue = value;
					this.SendPropertyChanged("FieldValue");
					this.OnFieldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldMaster_SimulationParameter", Storage="_FieldMaster", ThisKey="FieldID", OtherKey="FieldID", IsForeignKey=true)]
		public FieldMaster FieldMaster
		{
			get
			{
				return this._FieldMaster.Entity;
			}
			set
			{
				FieldMaster previousValue = this._FieldMaster.Entity;
				if (((previousValue != value) 
							|| (this._FieldMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldMaster.Entity = null;
						previousValue.SimulationParameters.Remove(this);
					}
					this._FieldMaster.Entity = value;
					if ((value != null))
					{
						value.SimulationParameters.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FieldMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_SimulationParameter", Storage="_TypeMaster", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.SimulationParameters.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.SimulationParameters.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeMaster")]
	public partial class TypeMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private EntitySet<Brand> _Brands;
		
		private EntitySet<Crop> _Crops;
		
		private EntitySet<Curve> _Curves;
		
		private EntitySet<DataGenerator> _DataGenerators;
		
		private EntitySet<DeviceState> _DeviceStates;
		
		private EntitySet<FieldMaster> _FieldMasters;
		
		private EntitySet<SimulationParameter> _SimulationParameters;
		
		private EntitySet<Variety> _Varieties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public TypeMaster()
		{
			this._Brands = new EntitySet<Brand>(new Action<Brand>(this.attach_Brands), new Action<Brand>(this.detach_Brands));
			this._Crops = new EntitySet<Crop>(new Action<Crop>(this.attach_Crops), new Action<Crop>(this.detach_Crops));
			this._Curves = new EntitySet<Curve>(new Action<Curve>(this.attach_Curves), new Action<Curve>(this.detach_Curves));
			this._DataGenerators = new EntitySet<DataGenerator>(new Action<DataGenerator>(this.attach_DataGenerators), new Action<DataGenerator>(this.detach_DataGenerators));
			this._DeviceStates = new EntitySet<DeviceState>(new Action<DeviceState>(this.attach_DeviceStates), new Action<DeviceState>(this.detach_DeviceStates));
			this._FieldMasters = new EntitySet<FieldMaster>(new Action<FieldMaster>(this.attach_FieldMasters), new Action<FieldMaster>(this.detach_FieldMasters));
			this._SimulationParameters = new EntitySet<SimulationParameter>(new Action<SimulationParameter>(this.attach_SimulationParameters), new Action<SimulationParameter>(this.detach_SimulationParameters));
			this._Varieties = new EntitySet<Variety>(new Action<Variety>(this.attach_Varieties), new Action<Variety>(this.detach_Varieties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Brand", Storage="_Brands", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<Brand> Brands
		{
			get
			{
				return this._Brands;
			}
			set
			{
				this._Brands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Crop", Storage="_Crops", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<Crop> Crops
		{
			get
			{
				return this._Crops;
			}
			set
			{
				this._Crops.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Curve", Storage="_Curves", ThisKey="TypeID", OtherKey="Type")]
		public EntitySet<Curve> Curves
		{
			get
			{
				return this._Curves;
			}
			set
			{
				this._Curves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_DataGenerator", Storage="_DataGenerators", ThisKey="TypeID", OtherKey="Type")]
		public EntitySet<DataGenerator> DataGenerators
		{
			get
			{
				return this._DataGenerators;
			}
			set
			{
				this._DataGenerators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_DeviceState", Storage="_DeviceStates", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<DeviceState> DeviceStates
		{
			get
			{
				return this._DeviceStates;
			}
			set
			{
				this._DeviceStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_FieldMaster", Storage="_FieldMasters", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<FieldMaster> FieldMasters
		{
			get
			{
				return this._FieldMasters;
			}
			set
			{
				this._FieldMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_SimulationParameter", Storage="_SimulationParameters", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<SimulationParameter> SimulationParameters
		{
			get
			{
				return this._SimulationParameters;
			}
			set
			{
				this._SimulationParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Variety", Storage="_Varieties", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<Variety> Varieties
		{
			get
			{
				return this._Varieties;
			}
			set
			{
				this._Varieties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Brands(Brand entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_Brands(Brand entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_Crops(Crop entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_Crops(Crop entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_Curves(Curve entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_Curves(Curve entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_DataGenerators(DataGenerator entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_DeviceStates(DeviceState entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_DeviceStates(DeviceState entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_FieldMasters(FieldMaster entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_FieldMasters(FieldMaster entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_SimulationParameters(SimulationParameter entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_SimulationParameters(SimulationParameter entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_Varieties(Variety entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_Varieties(Variety entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDetails")]
	public partial class UserDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _Password;
		
		private int _OrganizationID;
		
		private EntityRef<OrganizationMaster> _OrganizationMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    #endregion
		
		public UserDetail()
		{
			this._OrganizationMaster = default(EntityRef<OrganizationMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._OrganizationMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationMaster_UserDetail", Storage="_OrganizationMaster", ThisKey="OrganizationID", OtherKey="OrganizationID", IsForeignKey=true)]
		public OrganizationMaster OrganizationMaster
		{
			get
			{
				return this._OrganizationMaster.Entity;
			}
			set
			{
				OrganizationMaster previousValue = this._OrganizationMaster.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationMaster.Entity = null;
						previousValue.UserDetails.Remove(this);
					}
					this._OrganizationMaster.Entity = value;
					if ((value != null))
					{
						value.UserDetails.Add(this);
						this._OrganizationID = value.OrganizationID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("OrganizationMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Variety")]
	public partial class Variety : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Erid;
		
		private string _Name;
		
		private string _BrandID;
		
		private System.Nullable<int> _EICCropID;
		
		private System.Nullable<int> _ColorSpace;
		
		private string _Color;
		
		private System.Nullable<int> _TypeID;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEridChanging(string value);
    partial void OnEridChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBrandIDChanging(string value);
    partial void OnBrandIDChanged();
    partial void OnEICCropIDChanging(System.Nullable<int> value);
    partial void OnEICCropIDChanged();
    partial void OnColorSpaceChanging(System.Nullable<int> value);
    partial void OnColorSpaceChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    #endregion
		
		public Variety()
		{
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Erid", DbType="NVarChar(50)")]
		public string Erid
		{
			get
			{
				return this._Erid;
			}
			set
			{
				if ((this._Erid != value))
				{
					this.OnEridChanging(value);
					this.SendPropertyChanging();
					this._Erid = value;
					this.SendPropertyChanged("Erid");
					this.OnEridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandID", DbType="NVarChar(50)")]
		public string BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EICCropID", DbType="Int")]
		public System.Nullable<int> EICCropID
		{
			get
			{
				return this._EICCropID;
			}
			set
			{
				if ((this._EICCropID != value))
				{
					this.OnEICCropIDChanging(value);
					this.SendPropertyChanging();
					this._EICCropID = value;
					this.SendPropertyChanged("EICCropID");
					this.OnEICCropIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorSpace", DbType="Int")]
		public System.Nullable<int> ColorSpace
		{
			get
			{
				return this._ColorSpace;
			}
			set
			{
				if ((this._ColorSpace != value))
				{
					this.OnColorSpaceChanging(value);
					this.SendPropertyChanging();
					this._ColorSpace = value;
					this.SendPropertyChanged("ColorSpace");
					this.OnColorSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(10)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaster_Variety", Storage="_TypeMaster", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.Varieties.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.Varieties.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
